%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: pipe-mem.pdf
%%Creator: Adobe Acrobat 9.3.0
%%For: bryant
%%CreationDate: 2/14/2010, 4:08:41 PM
%%BoundingBox: 0 0 234 104
%%HiResBoundingBox: 0 0 234 103.4116
%%CropBox: 0 0 234 103.4116
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1190 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2010-02-14T16:07:39-05:00"
   xmp:CreateDate="2010-02-14T16:07:39-05:00"
   xmp:MetadataDate="2010-02-14T16:07:39-05:00"
   xmp:CreatorTool="Acrobat PDFMaker 9.1 for PowerPoint"
   xmpMM:DocumentID="uuid:9f55b5da-ef02-44ab-8a31-438388bd702f"
   xmpMM:InstanceID="uuid:3345b3e6-6793-4088-8ecc-66a0293ccaac"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 9.0"
   pdfx:Company="Carnegie Mellon University">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Randal E. Bryant</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -103.412 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 103.412 li
234 103.412 li
234 0 li
cp
clp
[1 0 0 1 -153 0 ]ct
153 69.75 mo
387 69.75 li
387 0 li
153 0 li
cp
false sop
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 153 103.412 ]ct
[234 0 0 69.75 0 33.6616 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 312 
/H 93 
/M[312 0 0 -93 0 93 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 312 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 312 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 312 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 312 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
#$,JmRB=?DpVm*L"2_mk_Z%CL_#D*O^AbnF_#D.P_SX.+rPX]7c,C+,VP'-.I5ON)GESGeoUcG]St)@A
SXl7<RJr]TRc'[]S,SlURgGLNS"6+?SXc:C`1N9d%\T2FJ9#1(/O3ETK7&)qrdjrtrdY*#It<+JIfFrt
I].\oIfFrsIKP(NIt.HJJq;U+%YAnNFD"iU!!!6C8krAfpg!f%r`B/%r`/qrr__*?f22HDr_rer!*B/%
r`Zs>T3Me27l;\/#Qne%Vl!MsoE5'oPQL:U_ZKo?S*9tSDWq3&@.XN^!Y'te2MK)AS;p*UL581up]Io*
[fY"\!<RoO"7?6k>3Q+hOOsXET`Pj)TRV?*5@]+f5lpc_mK%n?iW8BI!/'M;!*\Ug!/g"Bn,`uh!Y@nS
F)GFe%lQ;;!0[B_2":SA!!!,c!!"+n!"EE<!!6IQ+:j.'Kae\;r%SX70J>(3/1W2"-n-Mk-N,7],krYZ
,QB%V,Prba,PEDT-2f1i-O2%J-RU;k.4Y9H!\>lSq^qk%r%J1,1,A_]#;S%h0etL=1(#ck0etO?1,C^A
1Aip.2?#H42?,N,2$#Tmr\afiZk)IA!t]nf)#b<O(AegJ()Ied(Ans\%UTef*#TS1'GD,j%h&dP#RC52
rW``8#n%+L%1j*d'b_B$)&jS0L_)$b9ZEcs@#/P$"pb):rXAi9r!NQ3#R:54rW_Njr<D]qr!)-cnH](#
rWiW3#7(SBrX&H/r!<H5$4@7>$N:D5$N:D7$k!I?$ig\4%0$e7$j-tL$k*%D"V(tN%LrsF%KZfr#3uTu
#@R`@!so2;#l4c/"pP;;#lFo/"dUJ6;$p3!;cH[r<``@%<VKN$<E3""=&r=$;c?Zo;[tLV":"uARY#rj
I:i]c"8r3$!<<,u!<<3#!WN5[!JpgW!<*#u!9jIa!Wi9%!<[]7"9S].=p+^+q#gX"rWE'$!X"H!qDnU=
rAssBpHSjI5!D"gr]:*BrAt6I4<C*s"9fDAJp;8>3"C`EW;loakl:\foDnRb!$^%q!,;B3#[&`'R&194
0JNDZ!&4C*$S<q\.k)hm-7'r`,lJte,5NJ],4$KH+TNYM+nm2T,Q/ne,m5PB-R^DB.0(js.f_.!/cIC$
0E*[(0a'0a0ekBZ0`Wp,1%m@(1GU`b1]]Bhr%nI41c4qa!YM^Kll-0J&:Fj%(`+"_(&8UH%UK_G*"!T$
(_dVp%LrgP$24];#mptF$P*d\'G_N()]]q5N"GtE!a`pH"a5\)#Rq7@%LW^U%L`^Q$jd7J#mgG6rW^gV
!!q]lqZuj"rs8W0!=&o0#Q4o.#Q>&1$2P#-#m(JB%/pV<$4@4K$4Qe>!=TA7$j-qI$Oce>!"Jo9!Y#PH
r=/o=%M'$D%KZfr#4)[&$O:)C#RC_A#knQ(#Q"c."e$k=<rQ/$=BYW-ra#5%r`ob6>?b96=BSi,=Um<c
":l"H%]##!H3F<L!W2p!!<<,u!<<3#!WN5[!<<2o!Vc]p!ho\q!<*#h!;6Ek!<WFN"9Rll!EoU("RZ?m
Nu@j[!^T+@qa:'GrBpQP#Xq'G5X7Y&,+SW7"U,WnIiC9?!.k3[!!#=L!!!5f!!4GH!87DQC]"/8C-AY&
')jT_1&`j90.nh-.Olbm,paf]+sR"0r?(qYr#ac:m2l!DpE9AW$R-c>,U=Z_-R^Al.fLsu/H7=$/cmUW
0DdI%1&is$1&`s,0`j*c1]B-11G\nb!&FF.!Au_22$Poq2Dl)P&*k/?&V16+(`*u'Gk\HEGSLtm((h$_
&g8D=*#]Y1'G:re%LNMZrilN@#AjCE&T%j_$P*d_'GVH')]^"E'T*J$1BgCEYE)'Tp'h$2$iUJ7#RUh9
#64u"#Or#s#OVfo#P//^#71S=#6kA;"pP;=rWrN2q?d0/r<`H2r<`T6$OH\<!Xf>Bq[<90!"8W3!t>\J
$iCD6$P)tA":bnEOTt+Y#R4cA#m^hB#[R1p!+#L-$O!+P>?b?<>[1Q@?2e.3@UauhS-"@RK`7JIK487t
?sm;I?i=:6?!]Lf"TAl7!E"u46Nd8er;lltrrN*#rrN-$qZ6]up]0gbr;c6dquHQoq>p6hg]7BTh>u^<
!X!cPr<!!#n,reu!X&E)!<YpfD?*9*!sXr.8P)HD8cD6\8cD6^7Rh+kD?=NCC&VuMC&UX-8P)NH8P)PQ
8HL33"9&?($quFIi;eH0bl@`0kl:\gqZ$TtpH&?VqZ$UDnc/Y%r]:5p!"h:S!BUna!!%!9!!<=!XTJDR
r%Ja:0.nh..k2tr-6si\+WqgI*?FYirYt_Sq&B8PqA]8Nr#>2Ho,RZKrZ2Xn+<VgN+sS?Z-R^Al.4Qhu
/Gq("0)RC%0`Nm)0`Nm,0EEm^pb;q-0ekF=1&<[)1\ij-2>o?72)PuO')<RK+8[,U*XEF2%36E-)B,mT
!W]M')%dEb&gSYD+<2=<()@Jo%LicMrW!#)CpEs>)6jMX%1j*b()Il/+!DdP)MntZ0eu"dZ]G:e%/^P>
$k*RQ$4.%GrWiQ0#7(54!!i*"rW`?,qZcm%!!`B*q?Qj$r!36*lj!.gr!!W9"pY>;"pY>:#6kG>#mpS:
r<`H/r!EB/q[!H4#RLkH$4Hk@q@!92!=B56%/pY4$ig\4$jmIR%LrmW%1NH&"o8W($N1D2$3UWG"pt_:
#lpLi!s+ntr<W`5U+TtfARf:_ral=IBPD3sSGiKiS;!L4!!Aa.Ci')c!bc7[%qfKcAn=!$"V)"O"V[8T
!rN'!!<*!!!;up$!WrK)!WE-%!<E8&!VHHn!lY3?!<*#d!!37L"Si3$#4r'$"C)'5!!N9'!,hN4!H&&=
!sSmu*DK7);>sDj:BO?e9lBq1!cDglrVut::&[m$:JXe`;,L4h;,/U:!s&E(#:5=!b5d+oirB'Fkl:\g
qZ$UXpAb1TqZ$UKnc/YOrW!!]'0H0n!'B`O!-\;@"98F1_?9Zg!fR(\rVurQr;R%V,pOTV*uu=?r#5MO
q\]8L!#jQ/r##GOr#5SQru1YMq&0;R)]TD/*??1C+<_pS,pjue.4H_sr@Iq"r\"+%r@e@-0/,(5r\+=*
r%J1,0JN8V!&FL-r\FC-!]2_ipbW'aZ4eJ^,5ree,5ib\+p\s=%j<)=+!.]a!rW0#Z2>UT'3Ptq,pOWU
*uc+6'bh5j%W&EL!<BD(!>;YR%1a$a()7Z)*?QIP-79ae&,e3bRE:p#q[3HtbU*5g!13W-!(Qkk!<r`%
#5\Z("onhr#3uKk#QG#+"oef,"n)Wq#Q=o3#6kA;"pP81"ono-"onu+#lY)/#l=r,#l4l+$O-qG$OR7K
$2Y).%0$_8$iLM6$hk&3"HNftrXSo:!"Sr:pC793B*8\C$ipa+pB(Dcr!EK/X>Bfl$ZBp%E,fo;EH6)V
SGiQiSGiR&S;D<.EcQ,?F)l8>E,TZ45HG%e%KQR.!.=bHr;m$K>p0+H!)WT!"XX9P!<E2<!Vufk!UKgd
!PJO(!!37M"R?=!"()09#6b;8DYO86!cIr>"U,%$+^%tH=T;J&<rZ;%=9!1;!W[-;!X!=Z=BPQ*"]nf.
=]nr->66CR"9&<'!ZR.pq#CC[r;Zg;r'8U/JcP<@!(#iL!"/T'!'BoT!'C&X!&=$E!>[cr!!#+[!!,.t
nc/Z=qZ$\M_ZK]g!ro4`">'TR*W#d8$Zlh(,9\-L*#]_5)?(J[(\npH)%IQ&)B0Y:*ZlOM,UFcc-j1tK
.P*.J/HROX0E*U%0*O$_0/,(4q_/1.0JP:90_d@&1B'$*1B'*'1]e5p)!`[Z*/YCZ.4HYmYlY"(YlXt.
Z2>mM(K_M-%kT=_-RL&]*?,h2&eP^kZ2=\;Z"ssa'GqZ**?QIO-RgSu/g#WTr@nDCb+8\3$O=mcQkTN#
%DDbb#se_#"pY>;"U5/0#5&,c"9&Gr"8W,o"T/Ai"9Jc3"o&9%"o\].#6kG?q$7$,#RL55r!390r!<f?
$4@1J$O[:L$47.J%/pV5%/gS3$ig\4%/gS9"HWud')N@C')E7K$Yft]'+kfeS-&ljS,rcpSGWm2$F2X?
IXQZnIXZcsJUi9%JqB)Squd\'O+N":JqAQ*JUr?$J:;rs8?`9r%KZX1IJNsL>r#%b!!!C.r`oR["p+r0
!<N9&!20Gk!:9gd!Vl`n!<<,\!V$-k"+(7J$i:;,$NgZC"q1A9!cA&@qecH:!cIoA%L&m[ARo@`AnYgh
BP2!k"D;@\FDh!Y")`3oBDuTEBDuQEC&M]H26?uZ!<OC)<;HRr5QVf$!!"bQ5e-lN!!#:^!:Bge%/U#+
3rf9X3s#B^48T!Z49,ER!!+!"qu?aZ)tO%2!<A#S!!8"o!rFVfs/>\H%0-B(s8T,"]He[D*?,k6(`*u(
(&A[B'`Ad@'EAm6'`SpG']g).()%K#(`4/1)]Tk?+<r0Z-R^Dm.kCNLr[n7*0/!5Ws"OI+">;D^0/35U
!\lD`n1j_os"sa3qD8EgZQ:q\2)I/a2>T-;,*<Zu1GU[=YnIeUr@S2W',.YK/ef=**&BB+0.eY'-6scW
*>o\1'l:/S'*5@S&eu6#)''_A,:+]f/1iS42'm__r@nDCb+/V2$PU`oXd'%i!%H.9B)m)\#7(P>"pY&0
rrr6%qZZp#pB1HurWN0'nc\spquup"r<!$&mf`Xorri?+rrr?*!!iH,!!iK/!"&Q/":#5>#RLA9rsAW2
rWr9+!"8`4!XfACq[<E2rs\o8q[EK4rsef5!X+Sor##AKq\f5K$P77b(`=2,(7YjESGa0)S.6%!r"T8A
^Hhd["-JV*OT(CJPE_>tQBml-rXK""Q^7W9"dG77P*(t-Op-u0P>\jnr=/l/WdjjG%:(__:'L[u+^JA@
!(d7j!<<,h!NcD%!:0a\!<*#r!!!#a!V$-k"+(=Q%djl9$"F2O%LimWD@I%mr<`XE%1R4Q$3pjJ/p)2X
Fa*h0!.Fio!.4]n!IAY_%0:?mrI+Zos*t&o#C1K9G]uB["8r3$+-0M"!!>If*Z=nV"@,3U!"5V'ScAaU
kl:bs!!)rt"$6J_48f-]3rf7BqZ$Xb!<!$!!r`5t!!+3(rVus\+Su0;!WE-'!s8Z+QhpaaMo5\o/d23Q
p]%;n!"kXR%>Fg,+W_U?(`!i&6iT1[rXf2ps&/D"kn+%6B#"@*o+Cj4!"n`6'GD,o'c%Q$)&aG7+!DjS
,pk#h.P(KLr%.n$r%J"&r\"7*r\"7*r[n4*0DI4*0ek@90ekBZ0`j*c1&`p11G^dCr\Fd91c#]K0NV?T
=9+QZYlL!c=:@0a-<F5H;c9k6'<t:29EVO5'=%I/'JW?34$#D]2Dd3C/1Dtp,9\-NA?l+I'X;0j+<VmT
-RpW!0JbUG3'')YH4U!/%ksQrT`PT0$k*LOb[[csBDqlB>*fCdbQe@Y#6tG:"9Yt+!<!!$D>4Cj!sBJ(
Xni%f!rrJr"8E!!"oJN""pG59#6kA<rWi?,!!i!!rX&W2r<WN5#mpS="pt\F$OR7Mr<`]:$k!FO$iUP9
$OdFB%0[.J$NlJ,r@\1*E;,k&E;VBt*I\YT0J4t.S.6%!r[7mtS.6%!r$i$kl<MQXc-OVYc-H=7!7:\l
!Nqsl%Kr<)dEpAAdL=OMd*L"_d*L"`HHQEh%0Za3IK9KOr;d%,1/(n>rW!3g:^/mb!WiB(r;d!;ruD:A
!<N3ejoP)T"A[UM)@"[lrW(aTrW)6bqZ6Zr!!2lq#QoAb+!2UJ+'82S!*B(A$PR:c+!2UH*,Z2pDZ(IU
D@I%mr##PGr^Qn&"iA0saNMp.cihbFe!"\K%0:@1rmUho$dm>FaiD?=`5?$'"T8?%)Nk)&q>^X`!ZjE,
rW!'&)uot(p](=D+oD<@$$Fl#!i+lueGuZN!'g>\!"AT`!"A`)!$M.="$6J_48f-[3rf9]48T!k?2u)h
*ZGt5'G1f_$4-qB"pR(LrVus\3W93m#7(VE%1j-e)&aJ:*s&tM!!A>$!\O=&"okOqs8QO,!#?SNs8O8c
*#f_2'GD0H^S;AO%MM>3:ui,]%L*NTTFVXEDZ1.G&,Qk9%g!G8D=S2U4j=KJ&.oNf',23!)&jM8+<i$W
-R^Dn.kE7L/H@F$0DdI&0*!^*0*O$_0/,(5pb;_&s"O4&q_J1-s"sa3r\OZfZ8;D`!3u7u!3uH,$9P+6
>[(E8=Krb_qlp2@)R93<'/WH74?PYb2`<HG/Li.q,U4IBZ2>LRZ""q$,UFfg/MAh82`Ni[4#VHsr@eYO
ae&VA#mgtH$I!"^!m/YCrW!]C.Ep!A#7(J;"9eo0Z)oS[!sAW(p]]CT"u<>2"#@"srWN6'qZQm#!W`6=
ncJo6?2Og&"9A]1r!*0)!sSo4#5SQ)#5e`+#l+],#R:V0#l=o7#RUqG$47(H$46Y<!=K84$i^S6%/pV;
"-+3R1B''0SG*!`SGY5O+FXt[1,(F:S.l\7S-'H>S1=If!uUK7dfItKrmV)$f%&@'rR_.TSGX'&S?UZF
f`]sYf@\^SecjUTepbdEr=&i/X+16J!X2jb9NtdLrW!$.+^JCO!X/T+!Z:s<r;csXs$GE?!IC^J!WdVH
!:p3m3<'!L!<E/l!<N6%!kA=3!;um#"+(Y(+oWSaDYF,2DYtXb(2OI'+X80QDA3f^D?CReDB8Zq$k`G3
b0/)Vd+$V"gY;__"5Vk#DYt1NDO08=rndY1$/=%\da?FfA]+`M!<O1&>l"F'5QVug5l1N_5X5>F!!+J0
qu?arFkH`pir/oXipd!K>4DRm$fV0'!!#7\!!#+T!!#+X!!"2>!!54^!;ehZ!!#+X!"EE<,U4HS*?,h1
&Io6X":5A?4?NH@&j&2]#RLhH%hTHj)''bA,:!<&qZ%.j`<.\D/hSe1s/>\ls8!c2M[p[B().Ao5JQe9
%1O_qs%_>X!te%r%JL;,$jI>7CCL^]%/(,34O"?7%MTHd&ebrp(`F>6+!DmV-RgMp.kE7L/cIC&0DR=!
0*X-c0JG480_I.)1,:R=1,:T]1''0dqD/721_?uLr`]A-!F2o(+9JfQ>lIq53i+90>?Y02Z1f@@Z2@E2
1f#Sa4?GS`2)@!@/1N(q,\=7[+98\G+;1qj,:4ff.kND01c@?U4$>KL&,e3oT#mT+$47(I$4>!eXi\f#
%JY)P"p>)4"9>a0`!?>G"%KHg"Tnl$"RcHj"9\f/!<4J@"8N'$!<3o,"9EUMr<3*%%g3"="9eu6#6tG:
"pG/7#l4c/"pP;;$2b&/#6+o,#QG,0#6kG>#71Y@#PeZ&$3LYD$46\="Uk_G$OR=A$3ptJ$O[&s)Dh=I
!1`d#!LtqD1C,+Q'/D=!1,5<n(]^*(.hWcc>0=q.b0/#Rc-FSZc-FS7SGj?*SGj?5S?'oYcd'k^cd'eZ
rlYDdG00pc%0HU2JH>`O#lt)/>r#)X>uqF/FUeHR!<N9>s/Q,$!<L!86JDMB2ua!J!<P7\!:g-js7??f
!8deW!9=.\!<*#t!!<=N%ibHe!,hQL!Z>ksr>bqPBaan]!Z`7upDEsKr"p%Xr("K:^r++4b0%oOc-=S]
P&C7:!,hcR&oNlZda-4ac-4ASb/D38_IC@ar;cs=P$Ih`#!`524$YM#p`0/2!@?n+!!2)%quGUS!*/@c
!*Jak!"-pMfDkn:qZ$UXpAb1TqZ$U<qZ$UXpAb1TqZ%4=!$NC')]BJ+'+k]_$OI)!48o3[48o3e4#mNP
$4@:R&JZ&c)&s_?+p#=Q!!8G*"8af.s/>\ls4[O3"UYqe/j<'h)Aj5)&J@=27rJeG5D6"2$nAj's%X%g
\RiP%'1Ta1%1G;s^Cb>l&[?es^[NHV&-"Kq$k]a=q[<HcrkB4a$k]mr^;$9P8&)h-+t:7@s%<hd[qHes
mNXg.^]-q<^VB1`',;<$)B9eA,UOlf.P*/)0DdI'1&Ng*1]K611]B-81GU^B1c$pE1]'!/1]B361GgpG
2#]?42#K6)2?OPu10XW\!3u8E!O5l->Q[!_-sQm[>$5"5pE]gEr)"%^:F\Ol4?GM^2)-d:.k)knZ2Q$N
Z"^KB,n[C/.4Hf"0/>=@3B9/`4uIWtrA+PKbFeq9$S_ts%*W4`aip(OFp&'](aLh"FpA6T"9SY1,QAP^
!O=EZ"Tq8tXn`,$ZrH7k@K?G1""=<SDuQjN(]tTS<N`I>!!=tR!!<<=rri3$!-/"?-l)n#s&H2'-ij:L
XhFd,Xf_F&!P24mXh4XTXf_F(1Tddm!!39+"pOu1rrrB+rWiE.nd,F+$4."GrWrc9$4."G$46P9!"8c5
rX/c7$OZ_<!"Ac5$4RFP$4I=GNuB`-r\FPEpDX1(1G\qc#TnO21GUaA0V%kV!1`s;$lS2-]Y(tm]tM1q
^qp#b!Pk6))ZlP,SGjH.SAG3?%)Tiq^qme%^q[U#bQRnR!t511K),KY>r#)X>u1ND"9],F*%!@^r;n#@
)ZNJ1!!*u;6<4*f_lBb&!?(oMgoCH6s/Q2%!WW/"&-)`+;8]E7!!<7K)$^0C:f7&i!<<&!+TMO?:;j36
!]^4\WrN7BX/eGb)ZOL%WrN8%X/eDaI]KLO!!<6'rW3$!o`=7VlN-k_!!2`m"9WuZ)]Sbo!,hNO!cAqs
rYl+TBabq#)]Kc7q]5VU!,h]N&J"M'Z*CU@['[6P]Y2"n_SU3i*<L,=DZ1XhDSsB,^V7Cp]"#2V['[/E
^]OT9!<O1'?MXX,5QVug5TBbDq>^L8qZ$[C!*0!u![7VFrW!Aek&LG%,RgF0!!#s[rVup(roX1[!)s"<
jQ?C@!$(q;!*&dp!!rSdrW!4')Wg)]!*JCGrW!Smk&(/!-OZa4!!!Agk%k"tk2s;VmJm5PqZ$UXpAb1T
qZ$U<qZ$UXpAb1TqZ%1:!#usr(_mbu%h9!U#m^eurW!!]2*:d;&3C.(#n%.N&.oQk(E",3!4ht,!13f-
!rOoH2ZK`Ms8!1#M[2^2.k3G]M]E]R(DRWLUcd!8&H>(r:D!Oa%4grr5Q=Ii[(gMjs#)D-2@U5t:(h..
,ndIX%6L6n%1NmK2>dn4.fV@8&H>H;B^d5ss"tEZCCUsV2%D/+-U@],'5M@n4O"?L\kN_K'GM&o)B'V<
+seTc.kND/1,Lib2#oQ42ubo:2uko:3!qT'3&`cU3&`cU2uYf33<;0$r]1-A3]]:u3WM8@3Xe)24$++[
2-='e>$I<eYlL*f>6m9e.9g"[>$.'bYlV+mr_X>*:c(ru5X7Lr3B/oQ1+t40-RW^/Yl\\cC]:RNCF:J[
.ki\61c@?S4[)(eGnL!6"/3r4!r`T,%116gXi\6[.<Ymsr;\HAFpJ<Y"p>"5/8\u$0`;+R"u6&V"A$B0
[eL%]YH8Tqr;]Cc!!G%T"rHL=!#Ge<"U&fprWE9YquHWt.7j=9">flW([&O59DSVgrtbemqZ$ak^Atk@
"W6><"E[oP)#j^@"9\o+#6"i5#RC_C#RUkG$N(;1$NCM6%/gM5$iUJH$O[:L$Od@M$OI4L$OdCN$k*LO
r=&]6r!``;%1`pI%fd+<%grpZ%g@h3/MSt506?lX!-A&m!Zut,r\4I-06-`V!-%ib&K'P'Yct:6YHG(6
Y->%2Ycs_uS-#:eT)P5eT!5H%YHP19Z*:D1Y6:q7bQSOV&-Ds7K)tlM!s2a`9FP-,"sJ*m!!36*!]bE$
!\55i!ri9%FrXI^!I5Ug!Q+mZs$6[2W2foD)[F8##6K0:!DhAK"&Mhq!rr3#!dbgkquS1_)[HLl5QOa5
!!L=[#W_nb!dtpl!lt?bs$-T^d/X7J!<Q1m!Vc]t!<N?%!W)o?!<*$"!;Q[%"*>.n(`4,/;>4r.;u@R?
&S2=h)]9P4;tk/0;>q:6'GLu>5G81QUSFXaV$<iqX0&S/M>hAoM6Dd8DA\56YH=q+WMcYnW2HMiT2E9)
!s8Z/'U3/)!!baj*]l(V!$(h8!$(k9![[mRrW!*C!*0("*W,mF,]j"di8t">*<6'\rW!%?!!&bm!!?7%
!"&Q'!?D1;!!"&=!"*WE!2KSp!?;(>=T/:#)uK[@-u].dVZ6](rVuptX8r.u!&aWR!"/H^!"8Z(!$;";
!"/H^!"&N&&7,>P()%;k%LidR#m^b>"Y]j:!\X[0r]:ZE"U,,9$471N%M99f'b^SSqZ$\faTME!%KEC$
s",i!M[`]]7mp#`BT!oO)]9A*6)56p:ckHfWDG\T^E!865L9rT7rJkNXAhEX%h9.8TbOb,%M1ju'X:F4
%K[7B2Z4+!&3lj!%M1mt'=CRF'=CRL7r8c!rP'QV3C0;K&O;p!50XWM("kP\'c%Z,*?H@M-RgT!0JYIB
2E(Ln!BE4?3r_;;4T@MC4SUu>4Ztpu4T[`.4o7>A4oRPL4[)"l4qt%Z:&%]g<rQ)!<r,et32@l!<<Z?#
;G^.aqFpl]&55bP;'eFj5!1kb2D[$>.k1TK-Res?q]lb"-RUDp/MAh82E3`[5!:fD')afmU!9D9r=:(`
&BnXdaVGZ*FpnEQ!!!'uFpJ?Y#6b49/f+HkDCcS'#&sOC*;TZCAci&5)$C`T"19W]"9Gn\(B4RA!OsTr
rs&H*!]0`Sr<*<*\1.R`!P/[f)#jaB)#ja>rttoZrN-_/!4jW^!5'`_F'f"O)#jR="U+f0$j[+D#mgqH
$jm@N$P!%C":GVH%M&:D!"So9rXK)?%LipX%JgS7&,m(9&,6\:&JG$SrXo;:JKlZD0)dL'0E*U$0*!X(
0*3/D'E0Wi/h\e,/1N+uq^;@k#q%):gI[s-S=Q8MSH5=PrL<eVqjmYTs.B:^#G@]\S<Qpj"o])9&-/ha
q>pt/1/(ma&Qa)\!;up!6Zr>/"9BG@!DWl#!WN3r<WW7!WsfslrrE0[rr<*r;],Q6!Xp"I!`2_p!Z_4A
:f.8m!Wm`f#Q4])*<6!>%NPKN;,.,n;,.-Prr<-#rMpMJ,l[oI*<-'ArrE0&;\'-8!Vulo!UTmU!<3*"
!;6Hn!;Zcs!WE-#"9&?)"DSbb&c<7H&J5Wh&eP]grXf>I&J5Zb@0liG#8.X_&J5Na%e^>7$/7:rNW+qA
O,oHhQ'hE9r0[AK"I,.:Q'2*.!e<\Or<*3+'p<5+!!baj*]j?%0c^#i!$(k9$7>fR<WEF+!*0(+rT4/'
!%%UE!*0!u!`o@Jr;ZpG!!$(!!!=SK!*9!t!$1q:!%7^F""4-L<W2t$<<*#&!!*',rT4/$!%ImI""O?O
$iL&*$E*q),Okd0!!!o$!!6C*%/pV>$4$nB"pG,4rWDlr%g)n:"9er5#RLhG$k3IBR/6jbSBV374=!)i
W:s^0g]*0HP(7RmB6/tV+Wh[@(db)65eF:!'rk.pck@!3&J5XAU_4D4E=iqg<C*Dn&J@C*(:-dK&METD
nL+;J!u4A$')iIX&j`6)&J@@&(:R'P(:R'T88]&(cP-9j#o#\!&emX)&jFS>',24sn15Fs*[)aT.4d,,
1c@?T4?Yk+5Q3qJ62j4H6NTS@6i9:J63BSA6::Z;#X^pG6pa4.6UUc>!(6KK"X/PW1J1I2;$&SM,Q(CE
:eseZ91hfJ8btsj8M<mc5<M"g2`<HI/M&D$-RU/5+p]PD.4Zr%/i#3f2`Wr\048`5rB:=Wd&.!C&g>J/
XYC!Gb]XL9$N^A4>]p>Y#m^b=ZS)Be=T8XDrs3RVr<+&@[Oq[`ru2(Xrrfb_"9\e7/f=To"9_?55J[C"
"9JW(/c>ed!kBlc"9Q4d)ZL$F)ZL$Crttr\@f6E3!kTrc"Tl@e"E\#M":I)h^B+WG#R:P?$4?b?"UtkM
%hB6M%g!:R')W@A')rOA&crXW&Gm%T',(ri'+trl&ekum&eblk'+trl&ec#X'EJp_rY,/D"UJ:F(a^a+
/,h*u.g.C?ILn%..g7IQ.46Jir[%Fe&gen>eNo:XO-#K`O,f9\N/NXRr/L]:'9/'6NfK*XNffHbO-#N^
K3hr[#Q5>=!3q%UqZ@+01/'&":gJ2Qqu?dgFT_RD$m#?K)ujML!DZVqrrN'"#TNdE!]U,Z!`0M.)#jU<
!ZV.?:f.5p!lb5_!!N9&!]^2\r;mZPrrE0&)uft;:&tDo:'!EU!!<0$r;m9FrrN6ArrN9%!WE-&J#`PQ
quR!%!<N9&qu?`u!;-Bm!<3)u!;HQt!!!$#!;us!!<N<("8Drn"9&H#!sAZq=:#B6%/CD4%0m@Q%hB-W
?O$E<!=TG:$NUP@pB_B9dkc>uIXZm$K7no4L51S@rJLE0",_tlL]2u4KS4r+Db=&jrW<-'!sB=#B_h]6
5QVu,!$"6DqZ$Wu*;]^C-ia5o%9NT1<r`U)!!"DG!!$(!!!64%-iF#I-NF-JrW!!#!!<#t!*T1!!%IjH
""=3M<rN('<WE,)!!!E(!!"MJ!!=bP!"Ac*!9U6\!<NPl!!!i-!;6Bo<r`L)"p5#3"9\W)n,Wq!!WrN-
"9eu6!rrE`qZ$\hd09D5,6+U6!5/@3M]FB49jV^bM^Kbo*uu@jV\^5VdM<\#<>Y[6rY-"]6DP>5895I^
Y>[.T<"p/K<#DnF;\To_8AB3C'H8a<EYK3AEA7Dk'GpdH(q<EW(q3?Z89#@^s&/h2,SreB'c032'gU([
'c%T*^/c6r+s\Nc/ho1@3'08e5X@_(6U^lA!(QrX!_>mSqFCZX84`JF!(crV#=q?U8OuBD8-VXW84Z<C
8H)0\8Gl'e8P1up\!&m!.4H\:.K1^rSeClJ"XbTB,U4Q.+pUjW,pFKT+<CG$!Z)XfrY,#?&/,co(`4/2
*$$1G+uj+[/2I/k!MIa?W!!e3'dCk3:B5R^b]XdH00;g0A9J=h#m^e?ZnqtDYA+1Xrs:R]$N:2I"19fd
!rj2C)?1%9q?dB`r<aGB#R(A5s/d7<"Y`WQ)[-C=*)-27"Z?,_)ug3J)ug3Gru2,"q?R6.#6_Xk#6_am
#BjP]#6kDRrsT/=#RCbD$O[CR&,m+G',2)o',))p'`JgO'GM;t'GMA\'a>?e'c%Q!'`JgR'G_E"'bqN$
'c$Z`";Vdi(`2l_q\]ST&/LIG,S08R!HnbF&-i^V%M''Z%Lr=FrXKIb,YLg)9he8S8kM`L9MJ7T8e=]j
9M8#N9MJ5S:.S&m\J>_T('GHSYCZiQ"<q,,2ulNU?$-_u,qV/G:3?U>!s/QGrrN:KVuQoq<WRS7!WE-9
*<-$@3<&s[:Jq5263.19630n[!<WE+3rc5\qu\XmWW3,'`W4"E!<[d9!E)Vm"&hqq49#9_Im=#:!s0PD
!<O>B!WrB&!WiH*;bI)kr<!!"q>gNsqZ6Hn!!2Kh!!2irr<!'%"9&Am!s\u?G[;?o"U4?!!F,a("oni+
"oni+"T&B%"9[!b3B@(""$8Y055RS=5l<hS5X%=o5!1eg>d4eBrWNB,'U*D1!!5Ce!<`B15X6=e!!30(
*;]^9/H,VLhu3TX=TAGBqu?^GrVuq$rW!%&!!.0?!!@6A!*T7#!F"X_!!*,]rW!$$!!.0?!!@->!*B."
"'GU(?N'p)EVoe:/cG_P/cYk]qZ$V"oDl<"!C71\!!!Vq!!5am!8IPT"dJi`!i"*Hq`t>aIg^u0s7hKa
/1Dql+sKOU*?Idr)'5q_)++>;%At16V]$UJFVu1(<uF@(^C#*$*O\ud)&P^?5l2E!*sT9j^[s2t6iOh1
Eu?"0<Z)ph<Z*j1o.NQ3^EKEo7AUnC7ALhDDuX<c^V=n7,:+Za/1iP42E<f\5!VD#r^6`TrC-iY7nESM
!)!,[!_>jRr^[#ZpdbHX84`\Ns%*/]s%<5]!)!,[!_Q$U#YI`^91qJqK!"CPrO)U2rj;j8Za@%4ZN+>2
C^"TjC27R"rbMXQChs#d!,MOL")D[gD>e>RDfKapE=?Dc,<%tX6pj>6d]N]M(BbT!7g2TcbkcJrG'4B*
$OR7FZ8W!kruVOdrsT3SriHVd#.?>o"TKSN*WHQTErN0D+:0%f%/pP7FSZ"7#mWDlXf]PC$$6*J%Nbus
rsK)PrsK*,Xi(6^riHbg#.ZMr#.u\t*oZo8iN94*$2t8=$k*RT%hK6`&ebuW(B5-L(BYHh()Qib#8\3o
)&F,,(]5-K(BYNm(E*/gru1kR!?)gP)$(WprYZ.a)]BY7)B9Y8*#K2dKC"s'Pl6jOPa%>pP`q=*OoWu1
aU-&/aiDE?_Sa7,!PuYP_#V@N_#hNl_Z%@M_#V:J_ZHSE'`8gN!4.1WqZ?q+-3Q=-?2/OS!W`?)!Zh:A
!]^2[!_u_q!rr8#%07FJ!<P=^!!5nn!!<3"WrrD(:J_&j!WrBA#5\H,I]BHL!!EB'ri6#!%0BF%!!6+o
!!:<D!!WE%Wt5:PrrE0ArrE1!bWo+NX/c7!!WiB(!VZTi!WN5_!=T#1!<N9&!W`?'!WrQ'!WW?"!WW?%
!XSr1!s8Z25@o(an9FtZq0N<lH@1$aH@#=2!7q.h-HF-F`5]d5]t_:s^V.=m]Xteh]tD"i]tM%j]Y2"n
^VI_'_j(H2qud'5ODXgo!'pM`r]p5uqZ$[O!!!$"?2ag+=o\O4roO7^!%n0M!+,X)"'P[)%fYVi!!$4$
!!*QOq#CKVk2uXC!"T"jrVuq&rW!1-!!!&]!!!Q/joPM_1&_.Q1&_.VXDe0@k2tJ"b5_PD+mql#8bkj\
7Rfg86pX-55QHH9R0o:HPa%>mO,]'TL]2u0KS+r2re1l:L5(PCN/s-cQ'[r0S9Za_!!AqD#"AGZ!1Wfa
'T7q[NJf_R1+t4/-mp;d,9e?V+X$Y*rZM._r?).b+X$b-rZ_4_"A7/e+<^Y,ruh%Zocj;X!$hIep`g\&
,paod-n6`"0JYID3BKAg5se"07n?6E92#4W!)<Gfq+h&e:/Cja#Ye&h9hnDX9hkCX!)<De"]%lh:/=[b
:'XQi:JX_\:JUja!B_Rt)=\UD(]bEgdhV`q!uEa_7f>gZT@9nEq\]B8q90CnGmSb>'G:ui%LijT$OR4K
rWrQ3q[*6/r<`E0rsAW2rX&H/"E\Je$4?b=rsJ&ur!NK3rX8H-rsAZ4&.AsV%1a!]&eYik'c.Z'(E!)g
";hso*$"qsq],PQ!$(tVru24_*#]b7)]Kb8qA^4j*#ot=)]g"@*??1B*?6(@*$$+B*W7#['art,"UGD?
#R:Y*#NQ0h#R^qN)B'P6*?,!cJcbfO!%7SJ"Ecm55'?i-rrW3$quZm#kQ:_cqZ6fu!Ug*_"82fi!rN)t
!<*#j!qu`i!r`5\!Xf#1!W`<(!W`<'!s7Zgq?-a#r<)frf`V6Wqu[$(%?PQ)!;Sk_*!?6E*8ghf!!!Xp
!.k1R!!&eD#6%$f7K#[W6tD5T%1S5%3&WTJ0J4q-.OZ\mh^/CU^0p7RpF#P\r[@mu.kD8`/1rY41c73P
3^#Yl6:4.18,c$Z8cD<a92&&SrD!Gj:/4U`:'+-b:@h0[:@:gW:/1OZ!)N,[!)<Des%WMgq+Uub91_TA
!^f:>rBL6ErBL<Gr'13Hs$-BHqEk'HrC$TQr'gfZT$a\Cq\];N"rS@!)&b__rWs'X4;/>=&J,H^$k3XS
$4Gl$rX&]Lrt+T*rX8i9#mpM;r!N-+":GSH$k3(D!Y,_OrX];H',DB#()Ibb)?1QN)?:ZS)ZUlU)[%#r
*#fjq)?h*!)B9_8r>YeUr>PeY)]SbsrZ(t[rZ)%]*ZY/#q],e\+!2LDj<"XK*?5t7()@T!rY5)A!#,;F
"r7sg'G_H#r"f/Gr##JOrYk_QrYktY)B/[^!It7C!s'oprW`aP.g,qU!W`9%!r`5W!Wl1m!8[eJ!<<3"
!Vufp!WE/Z!WN5t!TO7\!WN6"!Vc`p"9/Gr"9&B%"9/E&!WE/p!VQTS!s0!rDt*f-*<#p<*7=ff!*t6X
NW93Ye-A?.qEtNU6q0U5Mfer)%WmUi3&`]N1,:O:/M/M)pFH4mr[[psr$qasr$qn":qs%^ngjSg!%\"!
!\GrSoe$.qq_&")0JWP_#rOY#3BK>e5XIgA6psL77nEVN"%l0Y9`@`f:/4U^:A[`r9MJ5T9MJ2T9MJ5T
9h\8UrCd>g9h\8Tr_<Ac"\h]b9MS=]:&n#f:(0il:/+JY9heAX9heC]9`Rr^:&R`j91hcH7RTR.p-/:9
qEP9O5sR\$5sdm76Mj.H7K,a[T$a\D)]S\nr>PkZ)]X$-r_!T)Fqk`+',2#i&/"jNq@)Qs"*CY1%J^G1
%/C>4%fHh:%/122%fHk5%KR(Mr=BJO&J>`j'GD5u(D[f'(`OFm)ZC]U*<.&X)uq&V*<.&U*!RE(*#ot>
*;^`X*ZZ9n*WdH,*<I<)+Sd)Z+T3A`+<Vd"+93M^+T<Mf+<VaI*?+noneV6?rtkVLqA05O)&F.e)>b?Q
)?(Q^*#fh:*$,*cJ-#fL"8i3&!s<[Br\X[P#B^.O"9S],!W<#U!<N5$g&V0Rr;l<dquQg!p]:-j!!)9b
r;m*&!W`?(quQTp!W`<'ncAOfqucs#p]CNu!WE-%!s/Pl!WE0!!rW6$!q-3s!WrN+!s/moDt3l/*!?0?
!<X=k!!*nuli;V;U]:Ime-Gk>r'g`X7Rm64#sLO83]T,V2Dd2k1,C];1&j$-1%$go1B9921BKBh1]0'3
2)R9Nr\tBJ4$5Yj5X@_)77B^:84ieQ!)*;cr_<GhrD3Mj:]jNi:JgsbnkK9_:JO^a:&n)e:'=9d:JO[R
:B4/h:B4/h:B4/h:\@Hf9he;R8Oc*8rBU6E!'pEG#!bF<5=%S%r^$HK!(-cS6N0@P7/oXS7/o^U7/oaU
7gDLR8"J&1"<.1Wru1kV!ZN*uqK<;c()I`#'GD)l&J5Na&Glq;&E+-!&H<4>%f[+:%fd(7&-!4;&-*7?
&-*7<&HECA&HrdZ&J>`krY5JN(E*/g!?2sU)uU`W)]\JkrYtnZqA]JVrYtq[*;plZ*$$.#*<I<'*W@,]
*?b2#!$:_R"s>'2+!;^M!?iTb+o`bd+T*G^+9ru2*??%9(`<,drY>8Gr>#GN(Dcud!#GMM!#PPNru1nV
ru1hTruD"W"WSO'!4@@K!WW?!FT;LB!sAZ-!WiDq!3-%c!V?Bk!<N6%!W2ru!<*!!!;lit!qlWp!pKa]
!rN0#!r)j!!W`?"!q?<c!WW?$!rE*!!r`;p!WidmDt3o)*2`dg!4i.3V:,\J6Ma(L7/fOT6:!s;5RK\<
4$#A]2`3HL2"NL'1Ais(1]K6'1B9901]B321\im,1]K?32#]?42#T<02Z,K83&ihq3".i/4$5\j5=%V'
6psKC7K>sX8Gu-Y9*%^\r_*Jg9MA)P9_qBf8kVfL91hiN9DqNa9DqNa9E%Tc92,7V$VX2e9M8#P92&&R
9`@`m9MJ5T9MJ5T9MP(Oqb%/d8Oc-95X.I04TIV<4T[f14o.A>5l<qC6N0=Q6ph,GSC=VD(]#$K)[I?#
)&XA4)AsIm)#Y3S'+tum&eGZK&Gm"8&Gm"7&H31A&.fBM&H31?&Gcq9&cWC@&cN=C&J,NM&c*+?'E8^E
'*]-c()@]%(B,-R(E")/)ZCTV(`F>4r>GbX)]BXo*<$lV*<-rU)\!c*)BB_8)]Te8*#ok;r>Z%`*#on=
*?6'u*WR5X*X!Q**$6:%*XNo0*?H7B+!;UHr?)(]r#bt\qB5bY!Z`7#"<&*o()H<QrYGGIrtkYMrYPSP
rYPVOq\f;N"r\F#!477Xq#gTtquZp#q?$a""9&?%!T*me!94+X!:Bjf!TX:`!<E9"!<<3!!<<5k!q?9_
!WN6""9/Gk!s&aj!,[>gJcNjl"/F<N62O"G6NBOR6iB=Z5sRXu5!:tg3B/rWr\ja5r\j^4!&j^3rAOR2
!&jd5r\aa6kr&T%2E(Fkq)J=5s#U->&NW!84?Yhk5<qJ"6:+%-6q'QD7K>sW8-2@T9)VE^9EIj[9`@Zg
8kVfL8k].U!(l`Rqb$o]m7[FPs%E#YrC[,aqF_/f8kDTE779L-5<\X$!'U<Dq*"X>rBL<Iqa($Er^-jY
d]N`i(AepK)>tER(`E;h#T4Kr(`+#)(DQf]!##8Crt,2@rXJo=r=Ji:rXSl<!Y5eOr=Ac:rXS?-q[rW8
rY#)?r=T)Br"B,G'G^T_rtPMLr"fAL)#P6O)Z:QP)uLQX)AsD2)Aj@k)ZL]M)?Lis)ZCZU)>kHQ*=3W(
*#]_8*$-(>q]>_W!ZiC)rZ2"[r#GbYr#PeYq&KYY*#]\3'bpT[r"Ac<q%`oFrY5DIr"f8J!#b_Oru(hQ
r##P9[".oQn,rXkrW1FIRfN*^!!<#u"Tnf-!s8VY!ri;u!WW8d!;HTl!r`9%!qZQr$'9#j!.k3&!8[\W
UXKPH62*_G62s:N5mfkB5<_7m4$#A]3;tl82Z>Z52?5]62Z>Z52ZG`82Z,K62YB!13&ikn3<)#73!ME(
3BB2]3W2#:3t=A94[)%o5<qJ"5sdn*6iKIR7K,dU7fZ*Y8cME_9D_<_8P2VP8Ie9^8OuEE84cBD8OuEE
8Gl$i84cEF8kDTH8kDWH8P2QGr(6r\r_!/^"A)0W8P/kR!)!5`!)!5`qF^ZW#=_0N69m^t4RbE:4?P\e
4?Pe+4Sq;A55meD5l3hN6:.-gYQXq@rYPSMr>5MNrYZ1a(`+&.)Aj8,(`*o&'bgca'+trkoaq08i">i!
!YGtTr"B#Aq%<Z>q@`cApCdN@rY>DH!#PPKrYGPPrYYMM"<&-q)B/Voru(eSoGIWIrYY_U)>Y6U*#]\6
)]BXl)Zgos)uLZU*W6r^*Zc=B*$-1"*<[E(*$$+"*<7/X*WI2[*<dE$)&O,)ne2!9rY,JK',2,oq\9)H
!#GMJp)!WD";_pUZ$uNNrr`3$oE5'orW0Y3YQ+\)!;uou!;$9p!W`?)!W)ou!W)p$!<E6&!WE-(!W`?)
!Wi9%p]:0ljoG)UrW;Zn!XOs)ec::%JcPEC!i+0NrBC9Iq*F^@$UI$B5<_7m4$#D^3SZRo3W;#93<2&:
3<2,=3W;)=3W;&>3W2#;3rhA@4T.DI5!D+n5!M:25lX.M6N0@P7/B=P7fGsW8cD<a8P)NGr^d#[!_>jR
r($fZr($fZrC@#^84cDL8G,OW8kMZH9(GRK8cVK[8cD6d7RTU/5!;"i47tZ749%A=48V/<4oISE5Pm_D
5m*S'XT\P;q\T8Mr"oJO)&`5d"r.mf'GD)kr=\r<r=],Aq[iZ<r"/f>!"o2Cr"/oAq[if@q[rQ8!#5AF
!"o/Crt>/A!##2DrYGGI!#GMJrtk\QrYYYOru(hTp)*uM(`+&-rYPbU)&O2.r>>k[)&XA3)AsD3q&05P
rYk_S"<8C#)]\DhpDirK#oad$(`4#'&eP`P')iUF')`LD'`SgG'`A^E(&o'K(%rIB(]tTTZ%)HK!!E'!
q#gQsrrK"trVup!`W-5E!<<-#!<E2j!W3#i!UTse!oj:R!WN5p!s/[iCVTq%!/ggWUB/gQrBLBL+S?]Q
*<.&Z*;piT)ZL]!)#kKQ)"SX<)Z(KO)u1KP*W$nt*s*Q,+6amJ+9!DV*s*K)*!.&u)ZCWE)"AL>)?q-!
)B0hc6N07QQdN#?rY>PP(CKsEq?m6/r<iH/!!rN0k6M%orWrE-r<`E.k6V.r$2t5%$2b/%$2k52$2"W*
$2k5+#lk>2#QY8<p'LF!!=B.b$3:MArWrT2$L8#t$MXo-#keQ+$5jZZ(]scCIKT?HquZftq?$Ztr;ls"
[fZR1rW<$!pB($ha8s<_!!2cpfE2!R!X4a&Z2fIVR/dMfe.4f06:)f9o=fgjK"g?\!HTF_63EP$YQat@
!=DZ+Ob/^rOTA;dr>,P9Z$lfQ!WYRN@Y/'@@dmh-63@&e!Kq6p!2Cup.CL]%!!o@L&O8WK66!Yp,D%.l
,Pr\d^)[)<$'ruC"Vqmi(($+j)M/mD)?Gs,r>,P9Z$lfQ!WZ]X)hK#a)ZX@G!s8W-P&'pp!%Em-JcO!p
!%IdF#c#l]5s[k*)ns?;Jg6F'!koU?r^-^PdfQ`W(]G6P$'U5bJf;rR!L!li)$ClY[!i,T!WZZI)hK#o
)Za@JrW<6("-@<q!!"JI!.k3&!87DQ.Jj)HUXKhR63/%>\Kc\NTHaNP*('Wl$'s&C"Vqjj(^ZDt)M/lZ
)W_k<P7%7+!s#]Y"8i3#@BLQ$)ljnY@06?/!K_0q!!"J3!.k3&!:Tsg.Jj)HUXKhR63/%>UEb@8[Nbge
*;r2+QIDu?rY5JM$'X0`Jf94Zq\fL!$2kYB!477YquQk,QlCVr_&EA_qZ?k\D>O;5.FJ3J!/COS.K'5L
!!&eC&cFop)SWp1rkID:rkJ.OoHX@Mh]i-9kp-2Bi?S?:o-<uSrkI,2!PTKN5Qd>$Xp+b>!==t1)Yb6M
Xl12tXm$c'Xkt#sXm[2*)ZHkt)ZHl')ZHkl)?H$.rYGVR!42cW"8i3#@D3][X5P#sX7I;))ucnq)ZZr'
)ucns)uco-)u:NQX4\Em@06E1!s/RdD>O;5.Du5`!<2->!<2-F!<2-<!!)0J!<)utk2?=>k32mFk1K_7
.Jj)HUXKeQ3rp24rZf9)!5JLX!5IP=!5JLX!5IhE!P]i\,9st^,QGOD,65LX,65L=,65LX,65LE,65LX
,65L4,6>Lqr]C<HQIDu?r=o>>PJ8"9Xo94>XW$7=!3Q5=!3PQ*!3Q5=!3P2us/kQ)!3Q5=!3Q2<k8F?&
rYbd=lP]c*rYbd=g):!U$2t\C(BCgm"8r6$!b([>bo6Y`rYkj<iu8!!rYkj<lPfi)rYkj<q&AQ;s/YE(
!3?)<!3>-!!3?)<!3>E)!3?)<!3>f4jVn2.quQp%ODXjp!%GY_!9X7\!9WqSmf3@MrVur\lMpqIrVur\
i;io?l2UhHrVur\nc84\!9X7\!9WSI!9X7\!9Vu8!%IdF!i+9VrAO`n^ZZop,65LX,65L=,65LX,65LE
,65LX,65LH,P<8_^E^MY,65LX,65L=,65LX,65LE,65LX,65LE,OcoY^DHl."?;^rXTeY:!=+e&)??o=
)??o))Yt?PXo94=Xm6l*Xo94=Xl:6#XW">,)??o=)??o&)Z:QSXo94=Xm6l*Xo94=XkFZoOpV($!s#]Y
"8r6$"(C")iu8!!rYkj<iu8!!rYkj<lPfi)rYkj<iu8(>WuJ,))ZZr<)ZZr!)ZZr<)ZZr))ZZr<)ZZqs
)uCQT@0?K1!s8XeD>O;5.DGi_k5G>\k2QFAk5G>\k3E!Ik5G>\k2H@BjoFQ/!!)0\!!)0A!!)0\!!;9_
!:9adk5G>\k1Te8.Jj)HUX]hP1'&-*dNe0)!5JLX!P]lY^AoMX^[!*E^]#GX^[!*E^]#GY^E``m!$hKX
l6?AF,JX("nKS%KrZ_HY,Q>FX,Q>ID,65LX,65LE,65LX,6>P(rkAFXrkI_CrkJ@U!PfHL1'B@ue#roQ
&HN0&^D[*SrYbg>)ZHi=)ZHl))??o=)??o6)YG!KXo94>XW%2@!#kj=l5B`+)Qi9C!3Q5=!Nd:>XT0:=
Xm6l*Xo94=Xn3P,)??o=)?HrYriH/=riPH(riQ):!gO'(rY#A6[!i,U!!*10`uFgn!3?)<!NR1=WrO+<
X6U])X8X%<X6U])X8X%=WuM&=!#tp<l5Kf*)lrEHr#5X:rYkm=)ucl<)uco()ZZr<)ZZr))ZZr<)ZcuY
ri6#<ri><'ri>r9!FQ$.!<E:a!,hZ6!%GY_!9X7\!TjC]jo>D\k3E!Ik5G>\k4AZK!!)0\!!23^roO1\
roWJG!p0LFl2UhHrVuu]!<2*\!<2-H!!)0\!!)0O!;c`rk5G>]joGDC!!*#\l2^hGqu?^GqZ$nseI*r\
/hRgQ`$>1)!5JLX!5JLX!l#tpkp$2CrZ_EXlQZDErZ_EXrZ_KZ,JWIf"2?'*^[*0H,9su&,65LX,6GV)
^ZZpA^Zm$D^]#GX^]#GZ^E^MX,65LX,65LW,6>Rnr@J,;e#roQ%KQd!rYiWl!3Q5=!3Q5=!j*BCko'Q(
rYbd=lP]f+)?LfqXo94?XW">+)?[)[)Qi9C!3Q5=!3Q5=!j*BCkSjH&l5BZ)rYbd=rYbj?)Qi6B!3Q5=
!3Q2<$'bc,%h9*M[!i)T!!*10^Dd0RrYkm=)[%*!WuJ,()ZZr<)ZZr))ZZr<)ZZr<)Zm&ZX6CQ*WuE"Y
l5K`(rYkj<rYkj<!?8*')uco')ZZr<)ZZr<)Zm&ZX6CQ'X8X%<X8NtC?ig<.!<<4`DYjD6.J!Pa!!)0\
!!)0\!!;9_k32jGk5G>\k3E!Ik5G>\k5G>`joFND!:'Uejo>DDl2UhHrVur\rW!#^!9WJFroWJG!9X7\
!9X7\!p0LFquH-b!9X7\!9X4[!%IdF"/FBQ-2o4l&&>q)!5JLX!5JIW!5JIWrkJKJs!.HVs!.HV![Ar)
rZ_EXlQZDErZ_EXr?D<Wr?M6Ts!.HVs!.HV!@,AY,65LD,65LX,65LW,65LW,Q,:V,6/td^],PV^B,W)
^]#GX^[!*E^]#GX^\oAW^\oDT^],PV^],PV^B,W)^\K)T^^pAi"I@N?":Y8;!<nbP)V>r.Xo94=Xo0.<
Xo019XoB=;XoB=;XTBCZXo94=Xm6l*Xo94=Xo0.<Xo019XoB==XoGO')Z6]<)QiuW!3PN)!3Q5=!3Q2<
!3Q2<r2ou;r2ou;r2g#=)QiuW!3PQ*!3Q5=!3Q2<!3Q2<r2ou;r2fr;!#kd;!ZDuZq&0:!#5nr3!474Q
!W`C2^Dd0RrYkj<r>Pa;r>Y[8ru:m:ru:m:!ZN)ZrYkj<lPfi)rYkj<r>Pa;r>Y[8ru:m:ru:m:!?8*=
)ZZr()ZZr<)ZZr;)ZZr;)uQc:)uQc:)ucl@X/d0YX8X%<X6U])X8X%<X8Nt;X8O"8X8a.:X8a.:Wra4Z
X8*\8?j$?.!X"O%qZ$UFh#QI8!9X7\!9X4[!9X4[r9""Zr9""Zr8n%\!9X7\!9WSI!9X7\!9X4[!9X4[
r9""Zr9""Zr8n"[k5G>\k3;pHk5G>\k5>8[k5>;Xk5PGZk5PGZjoPM_k5G>\k3E!Ik5G>\k5>8[k5>;X
k5PGZk5PGZjobYajo>DY!!"JF!!o@M#9=g+*Xom",65LX,65LX,6GV)^ZcsC^]#GX^[!*E^]#GX^]#GZ
^E^MY,Q#7A,65LX,65LX,6GV)^ZcsC^]#GZ^EXuj,65LX,65LX,6GV)^ZcsC^\K)T_$p8`".%E>"T8Z.
"I.=QmMZ)-rYbd=rYbj?)Qi6B!3Q5=!3PQ*!3Q5=!3Q5=!j*BCl5KQ%q\nuC!3Q5=!3Q5=!j*BCko'Q(
rYbd=lP]c*rYbd=rYbj?)Qi6B!3Q&8!L*`d$47+?[!i&W!<N<)@D<`]X8X%<X8X%>WuJ,()ZZr<)ZZr5
)tb-MX8X%<X8X%>WuJ,))uH]%)ZZr<)ZZr<)Zm&ZX6CQ'X8X%<X7RA+)ZZr<)ZZr<)Zm&ZX6CQ'X8*\8
@0?H0!X"O%qZ$UG`rPo8!9X7\!9X7\!p0LFkl:_GrVur\lMpqIrVur\rW!#^!9WPHqr[AJqu?`ZrVur\
rW!#^!9WMG!9X7\!9WSI!9X7\!9X7\!p0LFkl:_Gq#CCEqZ$Vk!S7MR'`eTW^EW`nrZ_N[,9su&,65LD
,65LX,65LN,PWJ`^]#G[^EXu<rZ_EXk9BuAl6?;DrZ_N[,9su&,65LD,65LX,65LK,Pr\c^]#G[^EXu<
rZ_EXl6?;DrZ_EXr?D?[#lPJ?QIN2Cr<NE-QGa^>)??o=)?[)[)QiuW!3PN)!3Q5=!3PQ*!3Q5="0EI[
Xo94=XlgT&Xm?r-)B,aW)?[)[)QiuW!3PN)!3Q5=!3PQ*!3Q5="0EI[Xo94=Xm-f)Xo94=Xo0.=Q3I3m
!W]]XqZ6b*rYr]n!3?)<"03@[X8X%<X6LW(X8X%<X6U]*WuD3])ljnsX8X%<X61E%X6LW(X8X%?WuE"Y
rYkj<l5K`(rYkj<lPfi)rYkj<!ZN)ZrYkj<l5K`(rYkj<r>PfG!Wr<&!KV-q!!"L`!!)0\!!23^!<D9]
!!)0H!!)0\!!)0I!!)0\!!D?`!9X7\!9WGE!9WPH!9X7\"Qf[ajo>G_!9WPH!9X7\!9WSI!9X7\"6KR`
k5G>\k3;pHk5G>\k5>8[.f02IUX]PH&HN-Qo-;I(rkJIXs1eOXs1dhDrkI\BrkJIXs1eOXs1deCrkI_C
rkJIXs1eOXs1dhDrkI\BrkJIXs1eOXs1eOXm3DVFr$)6Y#Q55@QIE)A"U5/7"I6\>riQ2=s/l8=s/l5<
mMc),ko0Q'ru1p>rYkg=ko0Q'l5KZ(ru1p>rYkg=qASlBriPE'riQ2=s/l8=s/kQ)riQ):!gNllrWWH)
[=/2U!s&I4kSr+mri?&<s/Z,<s/YE(ri>9&ri?&<s/Z,<s/Yi4oGde1l5T`'ru;!=rYtm<l5T`'ko9W&
ru;!=rYtm<o,IHDri>r9!Fc-.!s+O&qZ$UH^&\/prrE)]rW)u\nc8IcroWGFroX4\s5s:\s5rPGroWJG
roX4\s5s:\s5rbMquH`YklC_FrrE)]rW)u\l2^hGqu?^IqZ$nueI4/e1,9Q[h'7LrJg:.;&&Ar60ekAJ
e$0#e&J,KZQ'`JA)Sm<uPm7j4&JG/PIKTNK!<ZfZ)hK#a)ZaCMrW**%"-IO!!!"O/!.k3p!!"PH!!oFO
&k5>Z7NTFe,D%/',6u(+77BU4QI?)D#T=U#)@Dgg)M/mR)?H03r>Ph=[=/5U!WZ`K)hK#o)ZXCG!WiId
Du0M7/H,X$!.k4)!!"SI!!9"I'E(E%*l5B3Jg6p5!PoiU7L>C0Ym;6d*#o<No,<3!Jf<_h!L4#k)?UrZ
[=7uS!+N)MJfCa0!+Pj-!X"R'qZ$UHkQ$27JcP9?!%[pH#c6&a7Rfm<*l4TrJg7]K!PofU71)MMe$0)p
)&aD#Q/*@1)M/n))@;Z9)]K\6!4@7XquQk-QlCVr_&EA`quQp%O`1*s!%ZItJcLQ+!%\!J"98FueIqgM
!?T%9,D%/a,6>S#rC%$Ye$0)p)]BV%Q,aep)Nl!>PmRC.!<BM0IKKWPrW3(/MAq-dcPljnquQp%O`1*s
!%YtfJcM&9!%[pH!i=<Xr^-`T*5;CsJg5jlg*6p<)aZkY6^H-'#6#MB)$uP<)M/m#)?H'/r>>\;Z@E&U
!W`=3o,E9#JfEej!Fl3/!s+R'qZ$UHXoO%RWrN,MqZ$\ock-1?!^@U8kTf@;R21Ain.l);)*Rs_".%96
"oT5<$'3IPdh%*B[L`J#$2kYB!4%.XquQk0h&H#+NY-jTq[ig>quQp%P&:'r!%O?9JcNUe!%RjG#boTT
3B9,](q7p<!@&AuC]G6hC]P;f`G>Mi`,#Rc(HFN;$9FKuWs'.M'GLh4d2Dur`)m!Nr)h'C!"d(N!"es.
bZG12#o"'e'EG@e"8r6$"(fk!!"o!/buk#Y`*!'Poi]XE!"m.P#A!u=!WrK+P5o@p!!"Fo!5ns>!;Q`@
!rr>>!rr>p"4%&L./NuGU<*lC1]\>td3AZ-D"[kW!!=!Q(2V"k!u>\gD"@YW!!=!Q(2V"k!u>^Z(&]ok
QHQ30&H3:C#`AU"e/A?!=N:CD&6KKGmf;#@!t\QG=N:CD&6KKGli>f@!t\Rl#lPA<!3^nTr;Zj#B$hOu
&R"E"h#INh=V4fW!!<g9&R";thuEik=V4fW!!Em:Aci&4!<N@eB_qc0-M%5o!!!,@!!36&"69IB!!36&
"3(<B!rrG^!9O7^""*mF!hdOAr@e6dY0eHp(2Vn/kPt]#C_gj-!!=!Q(2Ve,lMq#&C_gj-!!=!QXqUdf
">H._U]gW+!=+AC)X84A&6QsQ!t\QG=P3]C!!<d7&6QsQ!t\QG=OmKC!"0??L'S8"%h8TBK*2&P!<Qo]
)Z^OReH#1@!teZJ=iULE&Qo]KdK&t@!teZJ=iULE&Qr`Jr;Zm$Q"^$p!$pA#oDejn`W-&B!!CLHq#CHu
!!C4@!WrE)b5hG?!<XVE!!8h3$iV^Z//,,_,Q>IO,Q>IV,Q>IU,Q>IO,68Qrdf9B_q>^N1rW!$9C_gj1
!!'e5!!=!Q(2V\)!5JF3rkJC3rkJF4!u>\gCsr@a^\\!2^\n-?(2U)c/1`A*QH5j)r=&c3LAVthXnE\4
Xo01;Xo'+:XnN_8)A$$"!!'.t!!'/#!!<d7&6R*U!3Q5#!t\QG=P<`TXo&1uXo/8!Xo8;&&6KKGdf9BM
qZ$Vur;Zp2=G6tY%0R+?Y(HfS!<E76r#>X9p)F"3r>Ya:r#>X9p)=#E=jm?NX82erX8W)$&Qo]Kr;b.D
!3?)!!teZJ=kWiUX8DtsX8N%tX8W)$&Qo]Kq>f4L!3>ts!3?%u!te[J!rW-$"-mHp!!"8A!<2-S!<2-Z
!<2-Y!<2-R!!!,s!8@JRk5#&Xk5>8]!rrGH!!)0[!!36&"82`V!!)0Z!<2-Z!<2-Z!!36&"4I5Mk5,,Y
k552["!d[C!2'A.$N2=Q&?5UQ!5JLX!5J:R!5JLX"2?'*^]#GX^]#GX^[iZN(2VM$rkJ=1s1eO5!u>\g
D#+.\!<9h5!!=!Q(2Vb+rkJC3!5JL5"2=g9^]"3;^An6LC_gj]!8deU^\n03^\n-?(2Tr]-7:2iQGfF!
rX8i9"G6Rj!3Q5=!3Q#7!3Q5="0EI[Xo94=Xo94=Xn*G3&6SW+huNbYqZ-YurW!$3=:eTY!<92#!!<d7
&6SN(l2^gcr;Zi"rW!&&!!'/#!!]P*!"`6D=OdENXo/8!Xo/5-&6OJd$4.(J!3CkUrW*'%")%TP!?8*=
)ZZr6)ZZr<)[!,[)lrrW!3?)<!3>]1!>/Jb!<0%r!<9,!!!<g9&R"Q&h>mSVrW!$4=V4fl!<0%t!!')!
!!B8%!3?)!#-._(&Qo]Kli?;Nri>ttri>tt$5$ET!s/N)!<\WuqZ$U>r;Zi[rVur\p](<VrW!&_!!)0\
!!)0\!!)0P!!!,e!:'Xak5,/Yk5>8]!rrGI!<;3[!!36&"6]aX!<2-Z!!)0\!!D?`!9X7\!9X7\!WrE)
eH#U2r;ciZqu?a",5V?ATYCg3,lnORr?D<WrZ_EXr$2.b!5JLX"2?'*^]#GX^]#GX^[iZN(2VG"!5JF3
!l"`MrW!$9C_gjJ!9sOc^Au%J!!=!Q(2V\)!5JI4!5JL5"2=g9^]"3;^An6LC_gjG!:p0j^\\!2^\n-?
(2TiY,:"T_QGfI"r<`Q-Jc-JeXo94=XnWe7Xo94@XVr+[rYbd=rYbd=o,7W@=Ps2O!!'/!!!98&Xo8;&
&6KKGbl@gI!3Q5#!t\QG=PWuV!!'/"!!'/#!!B>'!3Q5##-@k*&6KKGdf9BMqZ$Vur;[6;=FgP[$4I=C
XG$]WrW*$$BDibLX8X%<X8!V6X8X%>WuDuXX8X%<X8X%<X7I82&R!Q_!3?"t!il=%rW!$4=V4fi!;-<n
WrT4"!!<g9&R!ff!3?%u!3?)!"02D%X8W)'WrN,3=V4ff!<)ruX8;ksX8N#"&QriI!X&N)".!Kp!!",>
!!)0\!!)0V!!)0\!!D?`!9X7\!9X7\!9WhP!!CaO!WW5_qu?f\!9X4[!WrE)bl@h-!9X4[!WrE)g&M-8
r;Zo]!!!-%jo>DDrVur\rW!!%!!C[M!9X.Y!9X1Z!<XJA!!8h,#lZ%M+qCFI,65LX,6>P(rkAFXrkAIY
^]#G[^EXu<rZ_KZ,:!0%!5J4P!>]M#!!'e3!!9n8^]"38(2Ob&c2[qH^Au%J!!=!Q(2V\)!5JI4!5JL5
"2=g9^]"3;^An6LC_gj9!!'e2!!'e4!"0QYU^\Ik,UJbpT*>3"!XSsXr>G[<rYbg>)ZHi=)ZHi>)QiuW
"0EI[Xo94?XVr,UXnEY6&6RB]!3Q/!!j)I)rW!$3=:eTZ!!98&Xo8;&&6KKGg&M,Tr;Zi"rW!&&!!'/#
!!98&!!<d7&6RB]!3Q+u!3Q2"$kQNk":,8@$37)]!X&B&!,;BN!3?)<!NR1=WrO+<WrX0?rYks?)]PjW
)Zm&Z)uQc2)Zgrj=jm?NX8Dr!WrT4"!!<g9&R!?Y!il=%rW!$4=V4fj!!'(u!!')!!!B8%!3?)!#-._(
&Qo]Kdf9BKqZ$Vsr;Zm2=_dm:!s/RlAGZ?,+8l0>k5G>]joGDC!!*#\!<D9]!!D?`!9X7\!p0I_r9!YP
!!C[M!9X1Z!p0LFr;Zm$!!E0"d/X71!9X4[!WrE)g&M-8r;Zi[rW!&_!!)0\!!)0\!!36&"8W#O!!)0Y
!!)0Z!!*0EqZ$\j]a4T\![%rJr?D<WrZ_EXrZ_KZ,JX4&!5JLX"2?'*^]#GX^]#GX^[iZN(2WdHgAh5g
r;Zr7!!'e5!!=!Q(2V7r"2=g9^]"38(2Ob&p&O1S!5JI4!5JL5"2=g9^]"3;^An6LC_gj9!!'e2!!'e4
!!sEWUCA:f,9rMl!M'Dm#lt0Yr>G[<rYbd=rYbj?)QiuW!3Q5="0EI[Xo94=Xo94=Xn*G3&6RB]!3Q2"
"0DP'Xo8;&&6KKGq>f%G"0DP'Xo8;&&6KKGg&M,Tr;Zi"rW!&&!!'/#!!]P*!"`6D=SDgO!!'.u!!'/"
!"'9>IKTo_$46d5LA_/T!<Qs5)ZZr<)ZZr<)Zm&ZX8X%<X8X%?WuE"YrYkj<rYkj<o,@]B=nVjP!!'(u
!!B8%!3?)!!teZJ=j@!LWrN.#rW!$4=V4g.!9aC_X8N"uX8W)$WrN.#rW!/'!!!U6&R!Q_!3>ts!3?%u
$5$ET!W`<'!X"ctqZ$U;rVus!k5G>\k5G>^joFQC!!)0\!!D?`!9X7\!9X7\!9WhP!!C[M!9X4["6KR`
k5>8]!rrGl!8mhZjo>DDr;Zm$!!CpT!9X4[!9X7\"6KR`k5G>\k5G>^!rrGi!9aC_k5,,Yk552["!@C?
#bSd9+sA*P%AWkH!5JLX!5JIW!5JIW!5JLX"2?'*^]#GX^]#GX^\f>S^\oAX(2W::kl:^urVur5rVur5
rW!$9C_gj5!!'e5!!'e5!!=!Q(2W17o)Jd*r;Zi4rW!&8!!'e5!!^1<!#BAdCsr@a^\\!2^\n-?(2T`S
*ZuXOQG]6rr<WK-JGgAdXo94=Xo0.<Xo0.<Xo94@XVr+[rYbd=rYbd=r#5L8r>G\J=OR6MXo8;#Xo8;#
Xo8;&&6KKGj8eNH!3Q5#!3Q5#!t\QG=P<`TXo/5"Xo8;&XT/@'rW!/)!!!R4&6Rlko)JcmqZ$Vur;[09
=FLAZ#n%+@WeUHR!W`@8r>Pa;rYkj<r>Pa;r>Pa;rYks?)]PjW)ZZr<)ZZr:)uQc8)Z^ORhuNBL!3?)!
!3?)!!3?)!!teZJ=jI'JX8W)!X8W)$&Qo]Kh#RES!3?%u!3?)!"02D%X8W)'WrN,3=V4fc!!'(s!!'(u
!"'<@B`\;9!WiIj@J^$)*W5s<k5G>\k5>8[k5>8[k5G>^jo>A]k5G>\k5G>\k555Wk552Z"4I5Mk5G>\
k5G>\k5>8]!rrGV!;?Hnk5G>\k5>8]!rrGW!!)0[!!)0\!!D?`!9X7\!9X7\!WrE)ec>[L!9X.Y!9X1Z
!<XG@!!o41#U1E8+:Y+E,65LX,65LX,6GV)^]#GX^]#G[^EXu<rZ_EXrZ_EXo-48OCt/Le!!'e5!;jM7
!!!dN(2V:sqnE:7!#BAdCt\jh^\n-6^An6:!5AL6^]"3;^An6LC_gj9!!'e2!!'e4!"0QYUC81d+sWDk
SHSlt!<drO)??o=)??o=)?R#ZXo94=Xo94@XVr+[rYbd=rYbj?)B/8e!>&A^!!'/#!;il%!!!R4&6R6Y
!3Q1$"TSN6=:eTg!!'/"!!'/#!!B>'!3Q5##-@k*&6KKGdf9BMqZ$Vur;[09=FLAZ#n%(?WeUHR!W`@8
r>Pa;rYkj<rYkp>)lrrW!3?)<"03@[X8X%<X8X%<X7I82&R!Q_!3?)!r2U%&!!!U6&R!E[ql9l#!"i?G
=kWiUX8N"uX8W)$WrN.#rW!##!!!*5=V4fc!!'(s!!'(u!"'<@B`\;9!WiIj@J^$)*W5s<k5G>\k5G>^
joFQC!!)0\!!D?`!9X7\!9X7\!9WnR!WW3&df9C1rW)iXrW!!%!!COIqr[kX!WrE)g&M-8r;Zi[rW!&_
!!)0\!!)0\!!36&"4I5Mk5,,Yk552["!@IA$31'u]a,f*+Wq5ir?D<WrZ_N[,9su&,6P\*,JX4&"2?'*
^]#GX^]#GX^[iZN(2VG"!5J@1!5JL5!u>\gD#F@[!!'e5!!=!Q(2V\)!5JI4!5JL5"2=g9^]"3;^An6L
C_gj`!87DQ^\\!2^\n-?(2T`S+!;aOQG]6sr<WK-J,L8cXo94@XVr+[rYbm@)B,aW)?[)[)QiuW!3Q5=
!3Pi2!>&B/!8@JRXni"tXo8;&&6KKGb5_OErW!$3=:eU.!9F1\Xo/5"Xo8;&XT/@'rW!/)!!!R4&6RB]
!3Q+u!3Q2"#nU3f":,>B$NR1,LA_/T!<Qs5)ZZr<)[!,[)lrrW"03@[X8X%?WuE"YrYkj<rYkj<o,@]B
=jm?NX82erX8W)$&Qo]Kq>eqD!3?)!!teZJ=kWiUX8N"uX8W)$WrN.#rW!/'!!!U6&R"i.h#IGUqZ$Vs
r;[0:=_Rp<!<N<)QXTak!$;(=!9X7\"6KR`k5G>_jo>DDrW!&_!!)0\!!)0\!!)0P!!!,p!8[\Uk5#&X
k5>8]!rrGH!!)0[!!36&"7lNV!!)0[!!)0\!!D?`!9X7\!9X7\!WrE)df9C1qZ$WYqu?a"+8Z$>T=kO0
+p&nsU])M<,Q>IX,QGOX,QGOY,Q>IV,Q>IW,Q5CM,68QreH#N^r;ci3"TSN<C_gjU!8[_T^BFT;(2Ob&
g]78erW)r4r;ci3rW!$9C_gjR!9sR^^]+<3^C:/C(2TcU+<VmRQG]6rr<WK-If(,`XoB=>Xo97=XoB==
Xo01;Xo97;Xn<S5&6S5ulN$jbr;ci!"TSN6=:eTY!<0)(!!!R4&6S,ro`4olrW)r"r;ci!rW!$3=:eTb
!;ru!!;rr'!!!R4IKTrU$3C4-LAM#PC&AqLX8a.=X8a+A)lp"Y)uco:)uco;)uZi1)Z^OReH#NJr;cht
"TSN7=V4ft!9jL_Ws&J'&Qo]Kg]78QrW)qur;chtrW!$4=V4fq!;-?iX8`1tWset.&QrfL!<E6'".*Hn
!!",=!<2-\!<;3\!<;3]!<2-Z!<2-[!<)'P!!!,Z!;6Ejk5>;Zk5G>^!rrGI!<2-[!!36&"5NqW!;u!Y
!<2-Z!<2-Z!!36&"4[DLk5PGZk5G>]"!@C?!h[77r?VITV<B/h,68Qr`rH2WC_gj?!:Kmi(2Ob&`rH2W
C_gj<!:g*u(2TiX,9nH[QGfF!$2t84"+S]:!>&A`!:p0m&6KKG`rH2Q=:eT_!;6Bp&6KKG`rHJY=FgP[
#RUk<WeCNQ!<E79h&H#+!>/JT!!<g9&R!BZq>^U0=V4fW!!<g9&R!9Wr;Zm2=_IX6!X"g!qZ$U<ci=%J
aoMA?!WrE)`W-&B!!C7A!rrE'"3(<A"!@C?"/*I<.fLjt&usA)![AIs`rH2WC_gj-!!=!Q(2V"k!u>\g
CrZM[(2Tu^-mpJI.[J)K"T8c1"bP,?!>&AR!!<d7&6Sl2b5_VU=:eTT!!<d7&6Sc/c2[tY=FpY`rX8l/
XG$`S!<E78d2N)u=nr'D!!<g9&R!-S!teZJ=nVjD!!<g9&R!-S";+dM!s8H&!<\VfAbuH-,1$;i"3(<B
!rrH"!6kKF!rrGC!!36&"8;fB!!*0GqZ$\j`!cPs!\Y4hd3AZ-D"[kW!!=!Q(2V"k!u>\gD"@YW!!=!Q
(2V"k!u>^T')a?`QH5j)r=/i4L&N"?)?CCO`rH2Q=:eU'!8.>S&6KKG`rH2Q=:eU$!8IP^&6OVi%1NdW
!3UqUr;Zj#B$hOu&R"E"h#INh=V4fW!!<g9&R";thuEik=V4fW!!<g9Acho3!X"^!qZ$U@o)RVI!!C4@
!WrE)j8e3?!WrE)`W-&B!!D0[jo>Da,PqHBTZ@T@1]\>sd3AZ-Cu><W!!=!Q(2V"k!u>\gCu#*W!!=!Q
(2V"k$PmQa'f%O#17$+["T8l4#`@gal5B[7=N:CD&6KKGf`:I@!t\QG=N:CD&6KKGec>7@$P6Et#7h=T
&-/nb"8r3#!bKau!>/Jb!:p0m&Qo]K`rH2R=V4fb!;6Bp&Qo]K`rH2R=_.[5!!37dB_qc0-/ARn!!!,@
!!36&"3poB!!36&"3(<B!rrGH!;lft""!gE!hdaJrAjrr\'ZE$(2V,/r>#HN(2Uu+!c/Wg`teamC_gj,
((+le(,n332jVag"oT,9#`[7N!ZDVP`Xi2R&6Qp`!a$"9`Xi2R&6Qp`"^$`i&ePc['*,7f"8r6$!bKau
!>/JS&HZ)I=oArT&HZ)I=iM$T=V4g5&^:mh=_.^7!!<6(PA9sp!%?1o!!E#sc2[nJ!!C4@!WrE)p&NJ?
!WrE)`W-#A./NuEU&iUQrBC<$]?qi'(;t"h(AVdjC]G6hC]G7ECsQnu],:K.".%96"oT2;$'<OQ!"eg*
cr^8Z`)m!NnlX@C!"d(N$'5E,().J`Z@N,U!WZd1)q5f,&]@fP&aifR=TB&P=TB'"=k[![A-)c1!<N@d
D>O;5.F8(["5<nX!5ns>!9XI@!rr>>!rseI!!8nC')b9#*PV+ih]np4JemG`!koU=r^$^QdB<cQ)$(&.
d2LjQJe4so$'Y`5()ReeZ@E&U!W`=3kSre+R1Y#_n.>Y1quQp%P&L3t!%XfEJcN4Z!%[pH#c6&b8P)NH
+MlkYocjGP`,#Dhc#!/k!#ELh!#E^nqeQ;L*;r;4QIE)D)]K\6$'imV!"d7Sr)`q1`)m!N``N:E=:iDQ
!L3rh)$p;NIKKWQ!s8U6dMi3+&]@fP&]@fQ&R!(U!"m.P!Fc-0!<WB*O`1*s!%ZCr_ufu>qub%C!!'q>
!!)fsbQ@hqqZ$_pfG%$Y9`ZEUd3AZ-D#"(W!!=!Q(2V"k!u>\gD"[kW!!=!Q(2V"k!u>^k*rSV1QIQ#B
#lPeF$CK3Z!>&AR!!<d7&6Sc/c2[qX=:eTT!!<d7&6SZ,d/XOc=I9F6)B9^s[s\AW!<E72d2N)u=nVjD
!!<g9&R!-S!teZJ=n;XD!!<g9&R!-S!te[F!rW-$"-@Hu!!"SL!7LoJ"3(<B!rrGl!8%8Q!rrGC!!36&
"7-$B!!*0QqZ$\pfbOH^!?oG0,68QrlN#`@!u>\gCrZMX(2Ob&kQ'N@!u>\gCrZM`(2Ur391qlMQIiAI
r>u%JR.D6R)?CCO`rH2Q=:eTq!9=+^&6KKG`rH2Q=:eTn!9X=a&6P;+r>Ph=[snMY!<E72d2N)u=l9;D
!!<g9&R!-S!teZJ=ks)D!!<g9&R!-S!YJREquQp%ODt's!%d=6kl:\c`W-&B!!CmSmJm:j!!C4@!WrE)
ec>4?!<XnM!!9%M(&^o/+iX@(rkJ.OrkJCVrkIkG!>]M%!;QWo^]"38(2Ob&blIaXrW!$9C_gj9!!'e6
^]"64^]"38(2Ob&e,]K_qZ$l9^An6LCrILp8ctC0Z3^CN!=P:m)ZHl4)ZHl;)ZHl8)YG!L&6R0WriQ/"
!t\QG=O$mH!<0,"!!<d7&6RB]riQ/"riQ/"!t\QG=O[?MXnr)'XfVR'&6P;+r>Ph=[snMY!<E72r#>X9
p)F"3r>Ya:mMc0==j6sGX8W)$&Qo]KblIaDrW!$4=V4fc!<0%u!<0%u!!<g9&R!T`ri>nr#-4d)!"i@C
quQp%ODt's!%e$JroWnSroX.ZroWYL!WW3&blIb*r;Zm$!!CIGroX.Z!WrE)dfBC0rW)r[r;Zm$!!C^N
roX(Xs5s:\!<XnO!"&]+VV)\[:Jak2`Vh"]^]#GX^\B#R^]#G[^EXu<rZ_EXmiqiKCsE"\^]"3;^An6L
C_gjc!7CiI^]"3;^An6LC_gj:!!'e3!!'e5!!^1<!#BAdD#+.e!!'e5!!'e2!!^1<!#BCi+8ne6QIW;I
r>u%JR/Ip'Xo94=XnWe7Xo94@XVr+[rYbd=mhu3<=SVsJ!!'/#!!]P*!"`6D=O$mHXo8;)XT/>4=:eU.
!8dbVXo&/!Xo8;)XT/>4=:eTb!!'/#!!'.u!!]P*!"`8"$2keD!4MuW"8r6$!b2*I!3?)<!3>l6!3?)<
"03@[X8X%<X7$u.&R!BZ!3?)!#-._(&Qo]Kq>f%G!3?)!#-._(&Qo]Ke,TKLqu?_trW!/'!!!U6&R"i.
hZ*YWrVur!qZ$i$!!!U6@KQN0!s/RdDu0M7/H#PKk5G>\k4eoVk5G>_jo>DDrVur\mJm4hp&NbG!9X7\
!9X7\!WrE)c2[k,rVur\rW!!%!!DfmiW&u@qu?`ZrVur\rW!!%!!CaO!9X7\!9X.Y!9X7\!<XnM!!B+O
'i4g*!?oG],69%(rZ_EXp`fdRrZ_N[,9su&,65LI,68Qrc2[jZrW!/;!!!dN(2WF>huEblrW!/;!!!dN
(2VJ#!5JF3!5JL5#/:-<(2Ob&li?/J!5JC2#/:-<(2Ur3rCR0Xe[#P[*rub:r>G[<rYbd=p_j.7rYbm@
)B,aW)??o.)?CCOlN#uG!3Q5##-@k*&6KKGc2[jHrW!/)!!!R4&6S,rm/R-gqu?`!rW!/)!!!R4&6R<[
!3Q+u#-@k*&6P;+r>Ph=[s\AW!<E72r>Pa;rYkj<r#>SR!3?)<"03@[X8X%<X7$u.&R!BZ!3?)!#-._(
&Qo]Kj8eKG!3?)!#-._(&Qo]Ke,TKLqu?_trW!/'!!!U6&R"&mnGiQiqZ$i$!!!U6@KQN0!s/RdDu0M7
/H#PKk5G>\k4eoVk5G>_jo>DDrVur\mJm4hhuN3G!9X7\!9X7\!WrE)c2[k,rVur\rW!!%!!D$Wp](<V
qu?`ZrVur\rW!!%!!CUK!9X.Y!9X7\!<XnM!!9%N(&^r0+iXC)!5JLX!P]lY^AoMX^B#RorZ_KZ,9m3'
rZ_EXrZhEWocjJQCsE"\^]"3;^An6LC_gj?!;6Bm^]"3;^An6LC_gj;!;sS5!!'e5!!^1<!#BAdCt8Ua
!!'e5!<'Y9!!!dN`?5%N".%KD#lPhG$^gl2!3Q5=!Nd:>XT0:=XT9?BrYbm@)B,aW)??o=)ZHl3)?CCO
eH#FG!3Q5##-@k*&6KKGc2[jHrW!/)!!!R4&6RH_riH=*XT/@'rW!/)!!!R4&6R<[!3Q5#rN-5'!"`8"
$2keF!4R@Yr;cp#@f75GX8X%=WuM&=!#tp<!?8*=)[!,[)lrrW!3?)<ri>]2!>/J[!!')!!!]J(!"i?G
=j@!IX8W)'WrN,3=V4fe!;rl!!!')!!!]J(!"i?G=j[3LX8W,!Ws>]+!!!U6@KQN0!s/RdDu0M7/H#PK
k5G>]joGDC!!*#\!<D9]!!D?`!9X7\!9X7\roWhQ!!CLH!9X7\!9X7\!WrE)c2[k,rVur\rW!!%!!CaO
r8n%\!9X7\!p0I_!rrE'"47)Kk5GAZk5G>]""a<L!iFWcr_ESl+iXC)!5JLX!5JLX!l#tprZ_EXrZ_N[
,9su&,6P\*,JX4&!5J7Q![AIsc2[jZrW!/;!!!dN(2V7r!5JL5#/:-<(2Ob&e,TK`qZ-W1rW!$9C_gj9
!<9h5!!'e5!"$C?!#BCi+%f*s"A5!1ZO$OP![%l<r>G[<rYbd=rYbj?)QiuW!3Q5="0EI[Xo94@XVr+[
rYbd=p)3rC=O$mHXo8;)XT/>4=:eU5!7CiIXo8;)XT/>4=:eTa!!'.u!<0,"!!<d7&6Sc/g&V/TrVur#
rW!/)!!!R4QjN^1!s#fY"8r6$!b2*I!3?)<!3?)<!im9@rYkj<rYks?)]PjW)[!,[)lrrW!3>f4!>/K1
!7h,MX8W)'WrN,3=V4f^!!')!!!]J(!"i?G=nVjQ!!'(s!<0%u!!<g9&R!Q_s/Z,!!3?)!#-._(&QrQE
r;cp$O8s4r!!"SK!!)0\!!)0\!!;9_k5G>\k5G>_jo>DDrW!&_!!)0\!!)0S!!!,H!!)0\!!)0\!!36&
"8W#J!!)0\!!)0\!!36&"4R;Nk5,/Xk5>8]!rrGt!8RYTk5G>\k5G>\k5G>]""a<L#c?8i:JXe`+iaI*
!5JLX!5JIW!5JIW!5JLX"2?'*^]#GZ^EY!$^],PV^\oAX(2W[Ef`2#erW!/;!!!dN(2V7r!5JL5#/:-<
(2Ob&o)RbM!5JF3!5JL5#/:-<(2Ob&d/X9`!!'e5!#30J!#BCj*_Asq8s\#6#Tk-2+:FV:)?CbYrYbd=
r>G[<r>G[<rYbm@)B,aW)?R#Z)Z6`;)Z6`9)?CCOc2[jHrW!/)!!!R4&6SB$huEbZrW!/)!!!R4&6RE^
!3Q/!!3Q5##-@k*&6KKGli?/J"0DP'Xo8;)XT/>4=IBNp)Zp)LI09EK!<Q[-)ZZr<)ZZr;)ZZr;)ZZr<
)[!,[)lrrW!im7Zr2]i:r2]c8!>/K#!9=+[X8W)'WrN,3=V4f^!!')!!!]J(!"i?G=m,kQ!!'(t!!')!
!!]J(!"i?G=j[3OWrN.#rW!/'!!!U6?ip9-!X"O&qZ$UHr;Zi[rVur\r;Zi[r;Zi[rW!&_!!)0\!!;9_
!;u!Z!;u!W!!!,H!!)0\!!)0\!!36&"69IJ!!)0\!!)0\!!36&"4R;Nk552Zk5G>\k5G>^!rrG^!:^$k
jo>DDrVur\rVus$/,K;KVV)\[r_NV=`r.+^^]#GX^]#GZ^E^Mm,65LX,6P\*,JX4&"2?'*^[`TM(2Vn/
mf3@&rW!/;!!!dN(2V7r!5JL5#/:-<(2Ob&h#R3M!5JF3!5JL5#/:-<(2Ob&d/X9`!!'e5!"QaD!#BCj
*_Asr8X@o5#lPhG$^pr3!3Q5=!3Q5=!j*BCrYbd=rYbj?)B&UXrYbm@)B,aK)?CCOc2[jHrW!/)!!!R4
&6RTcp&G)prW!/)!!!R4&6RE^!3Q/!!3Q5##-@k*&6KKGec>UJ"0DP'Xo8;1XT/>4=IBL7)&X=m[s\AW
!<E70r>Pa;rYkj<rYkp>)lrrW!3?)<"03@[X8X%?WuE"Ynf%TA=k*NK!!')!!!]J(!"i?G=j@!IX8W)'
WrN,3=V4fd!!0,#r;ZhurW!/'!!!U6&R!K]"02D%X8W)'WrN,3=^V=0!<N@bDu0M7/,]GJk5G>\k5G>^
joFQC!!)0\!!D?`!9X7\"6KR`k5GAQ!!!,H!!)0\!!)0\!!36&"3plHk5G>\k5G>^!rrGQ!!)0Z!!)0\
!!)0\!!36&"47)Pjo>DD!!!$"k5G>]""X6K!iFWcrD3M<`r.+^^]#G[^EXu<rZ_N[,9su&,6P\*,JX4&
"2?'*^]#GX^\/lQ(2V7r!5JL5#/:-<(2Ob&c2[jZrW!/;!!!dN(2VJ#!5JF3!5JL5!l"^8!u>\gCt/Lc
^]"38^An8KrW!2<!!!dN`ZIeO8ctC0ZO$LO!=P=o)??o=)?[)[)QiuW"0EI[Xo94@XVr+[rYbm@)B,aW
)??o6)?Lfg=O$mHXo8;)XT/>4=:eT[!!'/#!!]P*!"`6D=O[<NXo&/!Xo8;)XT/>4=:eTb!!'/#!!B>'
!3Q5#$*=1-&6P>,)AsCq)$%-o"8r6$!atsG!3?)<"03@[X8X%?WuE"YrYks?)]PjW)[!,[)lrrW!3>f4
!>/J[!!')!!!]J(!"i?G=oA?K!!')!!!]J(!"i?G=k!EOX8DqtX8W)'WrN,3=V4g5!8IPSX8W)$WrN.#
rW!/'!!!U6?ip9-!X"O&qZ$UHr;Zi[rW!&_!!)0\!!D?`!9X7\"6KR`k5G>_jo>DDrVur\o`+soq#JtG
!9X7\!9X7\!WrE)c2[k,rVur\rW!!%!!DophZ*Z=qu?`ZrVur\rW!!%!!CaO!9X7\"6KR`k5G>\k5G>]
""X6K!2]eM(&^u1,/sI)rkJIXs1eOXs1eRYrkJCVrkJCVrkJ+N!>]Lr!<0b4!!=!Q(2WgIe,]K_rW!$9
C_gj;!<'\2!<0b4!!=!Q(2W^Fh>mPir;ci3%KO6D(2Ur38kM`LQIW;Ir>u%JR/@m%XoB=>Xo97=XoB==
Xo01;Xo01;Xn<S5&6SW+fDtoQrW!$3=:eTZ!<0,"!!<d7&6SN(irK%[r;ci!rW!$3=:eTa!<0,!!<0))
!3H54=I9En)Zp)LI09EK!<Qa0)uglVX8a.=X8X(<X8a.<X8O":X8O":X7[D4&R!?Yri?"u!teZJ=ml@J
!<0%u!!<g9&R!WarN#ksri?"u!teZJ=mQ.Q!<0%t!<0#'!36)3=^hI2!<N@bDu0M7/GoMIk5PG]k5GA\
k5PG\k5>;Zk5>;Zk4AWR"7#sI!<2-Z!!36&"3giFk5>8]!rrGe!:Bjck5>;Zk5>8]!rrGQ!<2-Z!<2*a
!9O7]""a<L"/a`d;>sGo,/s-uh]i.;CrZMX(2Ob&j8e6@!u>\gCrZMX(2Ob&i;i$@$PmQt+%o7#9:"2:
#lPnI$^f<[!>&Ak!9aCb&6KKG`rH2Q=:eTj!:'Ue&6KKG`rHJY=I9F9)]Tju[seGX!<E72kSre+!>/JT
!!<g9&R!cemf3G%=V4fW!!<g9&R!Zbnc/b(=^hI2!<N@bEVf_9/C4@s"4[DB!!36&"3(<B!rrGO!;-<n
!rrGC!!*0QqZ$\pfbOHa!@#S?,P<8^(2V"k!u>\gCsE%W!!=!Q(2V"k!u>\gCs)hW!!=!Q`uk7R$'s2M
#U1H9+Ua^c)?CCOaoMD@!t\QG=N:CD&6KKG`rH2Q=:eTT!"0??R0joR*?>-hIKTNL!<Q]X)Zgrj=iULE
&Qo]K`rH2R=V4fW!!<g9&R!-S!te[E!r`3&!<\F'qZ$UIci=%J`W-&B!!E0"aoDJF!!C4@!WrE)q>eb?
!<XnM!!B+P'ib04!@,Y4,68Qrq#J_@!u>\gCrZMX(2Ob&p&NM@!u>\gCrZMX(2V#6r_3GfQIQ#F#lQ"L
%%GW_!>&AR!!<d7&6Sc/c2[qX=:eTT!!<d7&6SZ,d/X:\=IT^ArZ2.A\9nDW!<E72d2N)u=nVjD!!<g9
&R!-S!teZJ=n;XD!!<g9&R!-S!YJREquHj$OE(-t!&"6Ndf9@M`W-&B!!DZifDksT!!C4@!WrE)li>c?
!<XtO!!oOT'iIq.;^03.,68QrlN#`@!u>\gCrZMX(2Ob&kQ'N@!u>\gCrZMX(2Ur4rC[6Ye$B>Y+or(=
o,?L)!>&AR!!<d7&6Runj8]8n=:eTT!!<d7&6Rlkk5YSq=I9Ho*!62KIfoWM!<QfZ)Z^ORhuMs@!teZJ
=iULE&Qo]Kh#Qa@!teZJ=iULD&QrZB!WiIeF8Gq;0'E<"!!!,@!!36&"5*\B!!36&"3(<B!rrGS!:^$i
""sHN!iXT_rCm;7_9jJ.(2VM:neM:C(2Uu+!c/WgdMDKk!c/Wg`YJnt_&Z!777ENkY6b(L!=Y=N)YG!L
&6Qp`!a$"9c4Kd_!a$"9`Xi2R&6R*er"'3;QO+NI)B8abJ-5]M!+XCq!>/JW&cE:C=V4fV&HZ)I=iV*V
&Qo]K`Xr8T@fcQ1!s&LdE;KV8/CFM"!!!,@!!36&"3(<B!rrGC!!36&"3(<A""aBN"98FudhMaR!?f/)
,6/LtC]G7KCrpJn(;t"h(AVdjC]V9ir^6lVQI2l@rZ)%^$C&pV!"ep-buarW`)m!NoiTRC!"d(N!L*rj
)$1]V[/kd[quQk/d2N&t`*!'Pq,tpE!"m.P!"np-cWL9Z!W<'$"-IR"!!"Rs!;-H@!rr>>!rr>l"4I>P
!5ns>/GfDKV9K_Q5li*Lrj^([rOE!@]=\$P`OLN0g:.H.*BH8C3gS'l#Q>PA)@TK_NXUo/OH5KcOcPTa
NK0$NNhDC<9aMRK'GLPOK)>]O!CHBie7S\n#AIpdBPD-oBY%f-B'!V)6Mpic"-[X!!6-Jk.kN>+0`E^,
/M/LF.Y9.N.f',HU<";P3WU`OpDEWBrYkeUrYtVPr#P\Vr?)%^q]>e\rZMUm+<VaK+!)CA)]\hroGmiN
!$(kV!$'u=m2Wn]!?E0Z*<@-#jW4LE*ZZ<h*W@&V*!R?#)&O/*(AnmJ)(,;=".%-.$2kP=%LN+?n-K(#
pBg^(rsAQ0rsS]2q@!Q<%L`dV$k3+B!sf/=#lY/$#lb50$2t4i$*sp;$2t5-$2Y#1$47+-$NCM5$31J5
$31J5$N:G4$31J4$3CSB$Mk//$3^\A#RC_CrWiQ3$kWCN!s#NV!W<*"!WE2g!r2rr!pKah"U"u4"6K[^
!WE/[!TF1:!r)fr!ri<#!r)f7!rN-#"8W)t!!37dC68LJ!4i.4TV5IEqDS40of2n1rB($ArB:0ErBC9I
r^$NM!(-WQs$m#YrC@;i9MSAW91VN?5sIR24oIPE4o@MC5Q<qE5Q="J5Pm_F5PdY;5Oq##4oRV@4odb<
4odbD4odbD4odbD557>F5X.J!5lO%O5X@\$r]pNLo0EID5X@a55ls;:623_D57'M:4ZYS^2)I*Dq_/()
0/*Q&QE,u[#l5/4&H3=6&cWOE')rXF(&\jH(&\pF(Ddr,(`4,0)]BS3)]Ke?+!2XN+!;UC)B&Gdr"8c=
";2C_'c$WZmM,:-rY!?e!#=i6!"o2DrY>8D!#,>G!YuIaqA',K(DZocrYPGK!#GDJ#T"?p(`*u*(`2ra
r"fST'bqAp&J#EI%L!@D!1Jf`ir]5_rrW'"rrVrt"9\f/"9eT(!<N?4!WiQ/"pbD:!WrN+!Whil!!3#u
quPaVrW14CiW/NNq#^U"o`P3srWD<d!!E3'!<WDr!!3?,Q2jF-!.k3l!!R26QTcZIq(MOtr%\((s"j[3
r\OL0!&aa6s#9j8!'1!=!'C-A"?eq45XPiF6q9U269[Lk2Z>T62!?ds2Yf6.2W?Ue2#T<$2#9*01]TB0
2?,N22?,N22?,N12>K002ZPc12[D<#3&ifS3&ikk3!M<#3&iiU3;>E42Z>Z42?l#q1GLO7.ekFt+H4(:
O&lDkq@3N9&,$M5&GH_7&cE7@&bm";'EJj^rY,AJ(]G0Z)&jM8*?,t8(_mYp%hARLq@<E6r=&c;&+g>3
&FBu-%fd.)%e^G"%fHq4%f[(8%L*FS%1NgY%f6e;&,m+?&cN@@&c`LB&dK'_&J>`j&eb*VrY>GI!Yc@a
r"K,Gr=o8HrY5>Hr"KDM'+kig%h/pTq$I?5!*,JI:BgmZ!;Z`p!rW6$"T8H#"TAN&":GA9"U>/4"9S`,
!!%TNh>mBRrr`9&qZ?g$rW<0("8i9%"o\Z'"oe`)"o\Z%"U"r1!s&Dp!<a9:QV@SL!.k3&!8db\"`B46
@6,V2/,:ap/cI<u/HROW0E!U&1&j$,1]0'02?#N62uYc:3W;&K4$Ptq5sIOr3B&fO1,8Y[r@n@.0JWGY
r%\4*pFuY'o.fYeoIp5!r%\=.0e`DXpFl@sr\+4)s"OF*r\4=)!\c;_s"O:(!\uMer\=O21G\qd!&OI.
!&aa4!&OI.#rORu2DmEO2)[Aj2?#H42>B$+1C#Zh0.\V%-mnm=$RR/?>bT'.FeB<K$2k;.%K-_/%0-n:
%K$\A%1`pZ%hTBb&H*1B&eYlU')`IN(Ddo*)]0A,'G;#W%K6b;$O[F;%0$h9%J^G&%I+As%JpS:$k3UR
r=/W4pC6s-rXJf6rs\l9rXAc8"UkeI$k3XA%0-h9%0-q<%K6h;&,m(;%gNRT&.fEa&.ngQ(_@>o&eYij
&eblk'+kfh&ebih&eYik&J=sTq@NoC%h8sU#mpP;rWi`0#cEW'M&-?n!pTgW!;urq!rN-$"9\W+"9Sf1
"9nc-!<WE%!:U$f!<3&p!V$0G!VcZB!Vl`_!;urp!r2s!"o\W'"TJT$"TAT#"9S`,!<W)u#Qb&.$mCRf
)J[k(JcLB&o`,;I7=^uFG[a#e-M]%b./YOo./k[p.KV+O/Gq+"0)[F'0`<a+1As$/2#]?C2EEi[4?GP_
2)I'?/M&D%q^VXtq^_Los"!mr!%e+$ngs2ZoIBkkr%.jumje/ar@7Xos!mpsr[Rmt!%e(!q^_b"/Gq+!
/H[UW/M?rS"Y_S_0JG0Y0E<m-0EX$a0JEDZ!&+:)!&+=*r\+:*q_&7./1W1t-6sf[+oWSn8;<eeX-d[Y
IL#rV$4?S8q$[*-rs\i6r!`T5rX8i;%1N4G!"Jo;!Y>kRr"&c<%1s3f()@`&()%>n%1E[?$3LSA$4-V<
q?d0/r<`6+o*OajpBV*5$O[:M$jm=L$OZ\8p^$O"qZup'!sf/>$2t83$iCA2$j-qI$k*"Br=/c8rXJo;
r=/uA%M03a&,m4K&.oHc%M00`&/"mQrX\u>rt#&>$4[OV%h&jR$4-tDr<EB)!!W^\R"B(-E#fJojT,>_
rW2s!qZ6HlrW2is$3^P7"9eo1"9JW)dfG+&rrDlqr;liu!WrK+p]C!grW3'#r;ult#R;7mH'Npi4tFJM
JcLc1!]apK"`f<h^8I]]Q@bFIQ4'V$^o<c^?#PUm:CP)?JcLu7$O9P(R"T]jDMX-C.f9C#"+gX-!t$AT
O->6?";F+8"1A2]!1a)t"aX`;+(]VJP,Z.2o"rnn"N/*n_o2Pl!lDgl]#''9jMDDE^9!uoNIt,;D1%_A
VPhG5"K8<!W2fiq!i`/toVo@"rh][pr2.uCf;\bH!3,mnhPh$_W1fZ=Jp;-3@;^FUL67Y_PMD?&Q';34
XHWUHrfmJIr0=:GrfmJIr0?`7n<4BJQ&M&fJ9Gf2"r&@p@>0QWOT1LAPlHp1OMd1TP0&gFOSG!qO9^r5
F)FE#*u'5~>

%%EndBinary
grestore
np
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: CourierNewPSMT Initial
ct_T42Dict begin
-0.121 -0.68 0.621 1.02
 256 array 0 1 255 {1 index exch /.notdef put} for  /CourierNewPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f320f2c5a91000000cc000000606376
7420aa0e65140000012c0000078c6670676db1123632000008b8000005d8
676c796646ab276e000083a00008d76a68656164cf8a813800000e900000
0036686865610aae0d5c00000ec800000024686d7478a289626300000eec
00002e586c6f636137506b0c00003d44000031406d61787010a6072f0000
6e84000000206e616d6587d24b0800006ea400000a4570726570bca08f1f
000078ec00000ab167646972000000000000000000000000000204cd0190
00050008059a05330000011d059a05330000036100660212050502070309
020205020404e0002affc00078430000000900000000544d432000400020
fffc04e7fe7e000006a90267400001ffffff000003620492000000200004
04e700000492001b04e7001e0362001e0000ffdf0000ffdf0000ffe2fe7e
000004e70000fefdffff02d7000000540000005400000000000000000054
00540095005400540054014d005400540054006400d4006d009100970054
013301ce00a90040000f005400d4000301000158003c0093007700d50055
fff10054002100a300ef002c00390068fffe0011007f00fe017d00a30102
0002000f003800d300650090023c032b04eb0001002a013003ab0182002d
003c00540096001700cf0158002aff0a003c00b3021d023c0002005400cb
035f082cff30fff201c004c9ff6200a2013c02d604ae00cc00ed01220400
fe83ff8bff9bff9c000e00f4031dfdc3ff31ff6d0054005500600075007c
007f0080009e00cd0159023d02bfff89001100580065007f00b700cb012b
040004600012005200550084009800b900be00cf00d800e50101010f0128
018001d301d40500fdc4fec4ff49ff62ff6f0045004e00500080010f011d
01250141025a035a03ad03d7fde3fee0ff1e0011005400760078007b008f
009000ab00d700d900db0103020a0254025503ad001b003d005a00620091
0093009e00a900c900df01080134013a0140018601ac02760403fdc40003
0004001500390048005400640091009b00a300a500af00c400d000d100d7
00f100fe01030119012b0155015c017d0185018e019401a501ac01ae01eb
020502d80303038104c604ebfed6ff0aff9affa9001b001b001c00200029
002c0038004c006d00cd00ea0128012a012c013f01d2022b022c0301040c
fdfefe33ff47ff7fffc5ffd7002300270038003d00440045004d00570062
0079008300bb00c600cd00cd00ce00e600f701010103010a0112011d0120
012301520153017501ac01ad01ef01fd0216021d0238026c02b202d4032b
03cd045704aefdb4fe15feb2feeffeffffabffb0ffc3ffcc000200540036
003800430055005d00700073007c007f00b500bb00c500e400e900f50101
0106011f01280148014b0155019801ac01df01fc02000208027e02ac02ff
033d039003c904190498fe4efe6dfe98feb3ff34ff4d0001000300050019
00340034003a003c0055005900730082009100a300aa00ab00b300cc00d6
00ee0118011e013001490156015801600168016f01700171017b017c0185
01a901b401bb01d601db01ee020402060215022b022b02630282029302b4
02c402d602e40300035303580371037b039303b403d003e80410042c0430
044d04600479047a05000503061608ccfc17fc6dfd62fd9afdc3fe2efe44
fe6bfe8bfec1fed6fee2ff0bffbfffe500060030003c005900670073007d
007f0086008e009f00a900aa00d600e100e700eb00f100f200f501030109
011a011e011f012c013f01430149014d015601570159016601660168016a
0175018001ab01b201bc01c001c101c901cb01d201dc01ef02010215022e
022e023b023d025502660282029a02ab02b002d902d902f502f90326032c
03320333033e03600371038703880393039703dc03e50402041504310453
047f04c7050305640596059b05c405c805ea0610065b0054005400540054
00000000000000000000000003cc02c1043e036c00a00050020303ea02d2
023c017d02fb01a7021d01c102f5021d035003500243023b000201bb0048
006d0014079b06210621021400100760000000000299022d03570426030c
007400500000025a0286026000a601bc00fb02480152017603cd02a0025f
039b0492043e01d7007f02c10400020d01f600410041013e01a901d30071
02d6022d03af04ce00000000050803fc056d020dff8704e7050203d20000
043d010203ca015a01ed0150021601c1013b028e0023015a011001ed0023
0149003900d9004d00b90157003804e0038c024a02db0039006c009301c1
03cc02bb006c02bb01a200f2003800fe01720150019c0331007e01710054
0039006a0294002202700222007c005500f30182011500d700fb01ab0124
02660004030d026300d40259003c00d00112022e017e0034006d008b018a
002c01fd01c000cc02910036016503befc19fd280201fced01b1034800b1
01fb04c904c9020400fb01c1021d01300108014000e100a3009b005500c6
0021032600a900380005022c0003005d0060004c001102f5017c026c0069
019803e901a50241004f0065037302460196fef504410333004100ba0119
014306390800053c051d0434041504e7003e006700670000066804df0582
0067006703d303f4ff59ff21fe5f050efedc007a00d9004800db018b00b3
004800da0116015e015104ff024b04ffff5600ab02af04dcff17010c0121
00d1ff300149feb5013c0124ff200171ff0b01510086005e06a9fd99048b
04850475047c0000fffb007b00860092009a00c200d500a4001e00270039
004c0054005c00620069002d0030003200350038003e004200440049004c
00500056005a006000640066006e00710078009d00ac00b10040004b0055
005e00620066006a007100730077007b007e00820087008c0091009600a6
00d102aa029f0321028802c50276026900da00da03c70340015600d40489
047f005300240051011300690037003c001f008c008cffd3005a0029001b
010f0134007f00540054ffebffd6ffa8fdcf00a600a600920092064200eb
06430028004f01f6041a0105404154403f3e3d3c3b3a3938373534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716151413
1211100f0e0d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b017
2370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b0
1923442d2c2045b00325456164b050515845441b2121592d2cb001436323
62b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb012
43588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720
b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb002
2546608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0
032545b019234445b01a23444565234520b00325606a20b009234223688a
6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f
1b235961441cb114008a5279b31940201945208a54582321b03f1b235961
442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2c
b10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c
4b525845441b2121592d2c0120b003252349b04060b0206320b000525823
b002253823b002256538008a63381b212121212159012d2c4bb064515845
69b00943608a103a1b212121592d2c01b005251023208af500b0016023ed
ec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec
2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb0
2a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b80269237010
20b802694520b0005058b00161593a2f182d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2cb4000100000015b00826b00826b00826b008260f1016
1345683ab001162d2cb4000100000015b00826b00826b00826b008260f10
16134568653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b
545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458
381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54b0
12435c5a58381b2121592d2cb012435c580cb00425b00425060c64236461
64b807085158b00425b00425012046b01060482046b0106048590a21211b
2121592d2cb012435c580cb00425b00425060c6423646164b807085158b0
0425b00425012046b8fff060482046b8fff06048590a21211b2121592d2c
4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b212159
2d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b0042602
4b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a462320468a
608a61b8ff8062232010238ab9032603268a70456020b0005058b00161b8
ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b140018853
5a58b910000020885458b202010243604259b12401885158b92000004088
5458b202020243604259b12401885458b2022002436042004b014b5258b2
020802436042591bb940000080885458b202040243604259b94000008063
b80100885458b202080243604259b94000010063b80200885458b2021002
436042595959592d0001000000050000d4b11bbc5f0f3cf5080908000000
0000a325516100000000c142e81dff07fa9004fb082b0000000900010001
000000000001000006a9fd9900000513ff07ffd204fb0001000000000000
00000000000000000add04cd00670000000004cd000004cd000004cd01eb
04cd010a04cd00bb04cd00e404cd00bb04cd00fe04cd01e104cd025d04cd
012d04cd00e204cd009004cd012b04cd00ba04cd01cd04cd00e604cd00e5
04cd00e404cd00ab04cd00c304cd00d604cd00c404cd011204cd00d304cd
00e704cd011304cd01cd04cd013804cd006204cd006504cd009404cd0113
04cd00d704cd001104cd005704cd007f04cd009e04cd005804cd009f04cd
008004cd006b04cd00e504cd00ab04cd005904cd008004cd001804cd002e
04cd006804cd00b304cd006804cd005804cd00b904cd008f04cd005304cd
001004cd002504cd005004cd006304cd00d504cd023d04cd00e304cd013c
04cd00e404cd000004cd01bc04cd009004cd002d04cd00ab04cd007e04cd
008004cd00d704cd007d04cd005504cd00bd04cd00b404cd00bf04cd00bb
04cd001504cd006c04cd009104cd002d04cd008004cd00ab04cd00cf04cd
009204cd005b04cd003b04cd003804cd006504cd009504cd00ed04cd0195
04cd023c04cd019404cd00bb04cd001104cd001104cd007f04cd005804cd
002e04cd006804cd005304cd009004cd009004cd009004cd009004cd0090
04cd009004cd00ab04cd008004cd008004cd008004cd008004cd00ba04cd
00ba04cd00ba04cd00ba04cd006c04cd009104cd009104cd009104cd0091
04cd009104cd005b04cd005b04cd005b04cd005b04cd00fc04cd015104cd
00e404cd007c04cd008f04cd016f04cd00ab04cd005904cd000004cd0000
04cd000404cd01bb04cd013f04cd006504cd001204cd005004cd006d04cd
009004cd006204cd009404cd006204cd005a04cd00b004cd002b04cd0036
04cd00a704cd00e104cd012804cd012604cd003d04cd001004cd007004cd
00e604cd01eb04cd001804cd008904cd00b104cd00bb04cd005304cd0063
04cd007f04cd006504cd001104cd001104cd006804cd001104cd001204cd
009104cdfff104cd00b304cd00db04cd01fd04cd012504cd009004cd009b
04cd009504cd006304cd006704cd000704cd006b04cd025404cd000e04cd
001304cd00fb04cd01cd04cd012b04cd00e004cd003d04cd001104cd0058
04cd001104cd005804cd005804cd00e504cd00e504cd00e504cd00e504cd
006804cd006804cd006804cd005304cd005304cd005304cd00ba04cd013c
04cd012804cd013c04cd013a04cd020004cd01b104cd01ba04cd013b04cd
01d404cd013c04cd005604cd00bb04cd00b904cd00cf04cd00d504cd00ed
04cd023c04cdfffd04cd008104cd006304cd009504cd00b304cd002d04cd
009004cd010e04cd017604cd015504cd016304cd000004cd000004cd0000
04cd009f04cd008004cd007d04cd00e504cd00b904cd00cf04cd007f04cd
00ab04cd007f04cd00ab04cd007e04cdffe504cd02c404cd001104cd0090
04cd001104cd009004cd009e04cd007e04cdfffd04cd005804cd008004cd
005804cd008004cd008004cd00bb04cd008004cd00bb04cd008004cd00bb
04cd002e04cd006c04cd002e04cd006c04cd006804cd009104cd005804cd
00ab04cd005804cd00ab04cd00b904cd00cf04cd008f04cd009204cd008f
04cd009204cd005304cd005b04cd005304cd005b04cd00d504cd00ed04cd
00d504cd00ed04cd007f04cd006704cd005a04cd006204cd00b504cd011b
04cd009804cd00d004cd007b04cdffe504cd011204cd011b04cd000e04cd
000204cd017d04cd000204cd017d04cd000204cd017d04cd017d04cd0002
04cd00a904cd006504cd009904cd009004cd021d04cd010004cd000004cd
021d04cd021d04cd000004cd021d04cd000004cd021d04cd000004cd0000
04cd000004cd000004cd000004cd017d04cd021d04cd017d04cd017d04cd
000004cd000004cd000004cd021d04cd017d04cd017d04cd000004cd0000
04cd000004cd021d04cd017d04cd017d04cd000004cd000004cd000004cd
000004cd000004cd000004cd000004cd000004cd000004cd000004cd0000
04cd000004cd000004cd000004cd000004cd000004cd026704cd000004cd
000004cd000004cd000204cd000204cd000f04cd000204cd000f04cd0002
04cd00ae04cd007c04cd002604cd000304cd000304cd000204cd014104cd
00b804cd008004cd000204cd006c04cd009f04cd010f04cd005a04cd0009
04cd001304cd000004cd020104cd012504cd00bb04cd014104cd000204cd
016904cd016904cd00ae04cd016f04cd001104cd009004cd007f04cd00ab
04cd007f04cd00ab04cd005804cd008004cd005804cd008004cd005804cd
008004cd008004cd007d04cd008004cd007d04cd008004cd007d04cd006b
04cd005504cd006b04cd003e04cd00e504cd00bb04cd00e504cd00bb04cd
00e504cd00bb04cd00e504cd00bd04cd00ab04cd00b404cd005904cd00bf
04cd009204cd008004cd00bb04cd002e04cd006c04cd008004cd006c04cd
006804cd009104cd006804cd009104cd005804cd00ab04cd00b904cd00cf
04cd008f04cd007a04cd005304cd005b04cd005304cd005b04cd005304cd
005b04cd005304cd005b04cd002504cd003804cd006304cd009504cd00d7
04cd001104cd009004cd001204cd001004cd005004cd007004cd01cd04cd
002504cd003804cd002504cd003804cd002504cd003804cd006304cd0095
04cd01fd04cd013c04cd008804cd005a04cd000c04cd001104cd000b04cd
001b04cd020804cd01d404cd01bb04cd010804cd004004cdfffc04cd0013
04cd004104cdfff604cd002a04cdffd404cd00f204cd001104cd005704cd
006504cd005804cd00d504cd006b04cd00e504cd005904cd000f04cd0018
04cd002e04cd009304cd006804cd006404cd00b304cd00c404cd008f04cd
006304cd005004cd001d04cd003c04cd00e504cd006304cd006204cd011b
04cd008b04cd01bb04cd005704cd010404cd004604cd015604cd008b04cd
00b304cd020f04cd009e04cd004104cd005404cd004a04cd014504cd0091
04cd00ca04cd00cf04cd005704cd009904cd004504cd007504cd012804cd
005704cd009104cd005704cd007504cd005804cd001104cd007f04cd007f
04cd00b904cd00e504cd00e504cd00ab04cd002304cd000004cd001104cd
007704cd002c04cd006404cd001104cd005704cd005704cd007f04cd004a
04cd005804cdfffb04cd007204cd002804cd002804cd007704cd002304cd
001804cd006b04cd006804cd006404cd00b304cd007f04cd008f04cd002c
04cd006304cd005004cd005904cd002904cd000404cd000404cd000204cd
000204cd005704cd008104cd001604cd000f04cd009004cd008004cd007b
04cd009804cd005a04cd008004cd001404cd009004cd003a04cd003a04cd
007804cd003304cd001f04cd006b04cd009104cd006b04cd002d04cd00ab
04cd00a604cd003c04cd007704cd006504cd004d04cd004604cd002104cd
002104cd004b04cd001804cd00a604cd008204cd002404cd008304cd0080
04cd008e04cd009804cd00ab04cd00cf04cd00bd04cd00ba04cd00b404cd
003304cdffee04cd003e04cd007804cd003c04cd006b04cd007f04cd0098
04cd002b04cd003104cd006804cd022504cd014a04cd014904cd014904cd
022404cd01b704cd01b704cd019804cd019804cd022404cd014b04cd0224
04cd023604cd00b504cd019804cd023c04cd038b04cd00b904cd01cc04cd
00d004cd009e04cd011504cd00a304cd00a004cd017704cd014904cd0092
04cd006804cd017304cd009504cd00b404cd00c004cd006d04cd008504cd
017604cd011c04cd004f04cd00c004cd00f204cd00fa04cd00de04cd00a2
04cd00c504cd00ac04cd00cc04cd00a004cd007a04cd008504cd008504cd
01bf04cd00f704cd005b04cd00e804cd009504cd009504cd000004cd0000
04cd00c004cd00cc04cd00b904cd00cc04cd00b904cd00d004cd00d004cd
00d004cd009e04cd011504cd00a304cd00a004cd016504cd013804cd0068
04cd017304cd009504cd00b404cd00c004cd008504cd011c04cd004f04cd
00f204cd00fa04cd00a204cd00c504cd00ac04cd00cc04cd00a004cd0177
04cd009e04cd00b404cd00fa04cd00ac04cd024304cd018c04cd016004cd
012404cd01c704cd01c704cd00fb04cd020104cd000004cd01dc04cd0197
04cd01dc04cd01dc04cd01a304cd01dc04cd01ca04cd01db04cd01d904cd
016404cd013f04cd00f404cd017f04cd015404cd013704cd010804cd0107
04cd012704cd009604cd01c704cd00e604cd024a04cd01d104cd01f304cd
010d04cd012704cd011104cd014504cd000004cd000004cd000004cd0000
04cd000004cd01ca04cd020304cd020104cd020304cd01a204cd01a404cd
01ab04cd016d04cd015204cd000004cd019c04cd016204cd016004cd0025
04cd002504cd000004cd000004cd000b04cd000604cd000004cd000004cd
011004cd009e04cd000004cd000004cd009004cd006504cd000304cd0003
04cd000004cd000004cd000a04cd000a04cd000004cd000004cd00aa04cd
007004cd00f004cd009704cd00f004cd00f004cd009e04cd009e04cd00bf
04cd00bf04cd00bf04cd013f04cd009004cd009004cd00f004cd009704cd
00f004cd009704cd018304cd01d504cd01c704cd01a804cd01ca04cd0000
04cd001d04cd002b04cd002b04cd000004cd001d04cd002b04cd002b04cd
002b04cd002b04cd000004cd001d04cd000004cd000004cd000004cd0000
04cd000004cd000004cd000004cd000004cd000004cd000004cd000004cd
000004cd000004cd000004cd000004cd000004cd000004cd000004cd0000
04cd000004cd000004cd000004cd000004cd000004cd000004cd000004cd
000004cd000004cd000004cd000004cd000004cd000004cd000004cd0000
04cd019c04cd019c04cd025d04cd012d04cd000004cd001404cd020104cd
010a04cd00cb04cd019704cd019704cd00c404cd00c004cd01bc04cd01f8
04cd00aa04cd007004cd000004cd000004cd020004cd01f804cd002504cd
002504cd000004cd000004cd01c804cd018404cd002504cd002504cd0000
04cd000004cd002504cd002504cd000004cd000004cd011004cd009e04cd
000004cd000004cd011004cd009e04cd000004cd000004cd011004cd009e
04cd000004cd000004cd019e04cd015104cd019e04cd015104cd009004cd
006504cd009004cd006504cd000604cd000604cd000004cd000004cd0006
04cd000604cd000004cd000004cd000004cd000004cd000004cd000004cd
000004cd000004cd000004cd000004cd000c04cd000a04cd000004cd0000
04cd000c04cd000a04cd000004cd000004cd011a04cd011c04cd000004cd
000004cd011a04cd011c04cd000004cd000004cd000b04cd000604cd0000
04cd000004cd00a604cd00d604cd000004cd000004cd00b404cd003804cd
000004cd000004cd010804cd007104cd000004cd000004cd01b204cd01b2
04cd000004cd000004cd00fe04cd008e04cd000004cd000004cd01f304cd
018404cd000004cd000004cd00c404cd00c004cd00aa04cd007004cd00aa
04cd007604cd000004cd000004cd006704cd009904cd008204cd00a104cd
009c04cd00d704cd009c04cd00d704cd021904cd01d104cd01dc04cd01dc
04cd006104cd004c04cd019c04cd01db04cd01ca04cd010d04cd024a04cd
01a304cd019704cd005d04cd002004cd000504cd01c704cd01ca04cd01ca
04cd01d504cd01a804cd018304cd01db04cd01b204cd01b204cd009c04cd
009c04cd01ea04cd01f504cd01f504cd007504cd006b04cd01b504cd01f4
04cd01e304cd012604cd026304cd01bc04cd01b004cd007f04cd004104cd
002604cd01e004cd01e304cd01e304cd01ee04cd01c104cd019c04cd01c7
04cd019e04cd019e04cd00d704cd00d704cd00c304cd00ce04cd00cd04cd
016a04cd017404cd008e04cd00cd04cd00bc04cd000004cd013c04cd0095
04cd008904cd017f04cd011104cd00ee04cd00b904cd00bc04cd00bc04cd
00c704cd009a04cd007504cd018604cd015d04cd015d04cd01be04cd01be
04cd01bc04cd019a04cd01df04cd000004cd002504cd002504cd000004cd
000004cd000b04cd000604cd000004cd000004cd00f004cd009704cd009e
04cd000004cd001d04cd002b04cd000004cd000004cd014704cd014704cd
015804cd00f304cd00da04cd01f804cd01f804cd00ce04cd000004cd0068
04cd009104cd005304cd005b04cd01c104cd019904cd019804cd01c404cd
01cb04cd01c004cd01bb04cd01c504cd01ab04cd01b904cd012b04cd0124
04cd011804cd015e04cd014404cd037d04cd00c804cd000004cd000004cd
019f04cd01bd04cd01a504cd01c304cd01b704cd01b704cd012b04cd012b
04cd012b04cd012804cd012804cd012804cd01ff04cd01ff04cd01ff04cd
01ff04cd01ff04cd01c404cd01a804cd012804cd01ff04cd01ff04cd01ff
04cd01ff04cd01ff04cd01ff04cd01ff04cd01ff04cd01ff04cd01ff04cd
014204cd012b04cd014204cd012b04cd001104cd009004cd001104cd0090
04cd001104cd009004cd001104cd009004cd001104cd009004cd001104cd
009004cd001104cd009004cd001104cd009004cd001104cd009004cd0011
04cd009004cd001104cd009004cd001104cd009004cd005804cd008004cd
005804cd008004cd005804cd008004cd005804cd008004cd005804cd0080
04cd005804cd008004cd005804cd008004cd005804cd008004cd00e504cd
00ba04cd00e504cd00bd04cd006804cd009104cd006804cd009104cd0068
04cd009104cd006804cd009104cd006804cd009104cd006804cd009104cd
006804cd009104cd006804cd009104cd006804cd009104cd006804cd0091
04cd006804cd009104cd006804cd009104cd005304cd005b04cd005304cd
005b04cd005304cd005b04cd005304cd005b04cd005304cd005b04cd0053
04cd005b04cd005304cd005b04cd006304cd009504cd006304cd009504cd
006304cd009504cd001104cd009004cd00e504cd00ba04cd006804cd0091
04cd005304cd005b04cd005304cd005b04cd005304cd005b04cd005304cd
005b04cd005304cd005b04cd012f04cd011404cd00f504cd011404cd007f
04cd009804cdfffb04cd001404cd007704cd007804cd007704cd007804cd
006b04cd006b04cd006204cd009504cd006204cd009504cd005004cd0065
04cd002904cd004604cd006b04cd005504cd004204cd008004cd006804cd
009104cd01f404cd018c04cd015b04cd014804cd01bf04cd01bf04cd0148
04cd014804cd014804cd017704cd020004cd01f804cd00c404cd00c004cd
00c404cd00c004cd00aa04cd007004cd002504cd002504cd000004cd0000
04cd002504cd002504cd000004cd000004cd002504cd002504cd000004cd
000004cd002504cd002504cd000004cd000004cd002504cd002504cd0000
04cd000004cd002504cd002504cd000004cd000004cd002504cd002504cd
000004cd000004cd011004cd009e04cd000004cd000004cd011004cd009e
04cd000004cd000004cd011004cd009e04cd000004cd000004cd011004cd
009e04cd000004cd000004cd011004cd009e04cd000004cd000004cd0110
04cd009e04cd000004cd000004cd019e04cd015104cd019e04cd015104cd
019e04cd015104cd019e04cd015104cd019e04cd015104cd019e04cd0151
04cd019e04cd015104cd019704cd015104cd019b04cd015104cd009004cd
006504cd009004cd006504cd009004cd006504cd009004cd006504cd0090
04cd006504cd009004cd006504cd009004cd006504cd009004cd006504cd
000604cd000604cd000004cd000004cd000604cd000604cd000004cd0000
04cd000604cd000604cd000004cd000004cd000004cd000004cd000004cd
000004cd000004cd000004cd000004cd000004cd000c04cd000a04cd0000
04cd000004cd011a04cd011c04cd000004cd000004cd000b04cd000604cd
000004cd000004cd000b04cd000604cd000004cd000004cd000b04cd0006
04cd000004cd000004cd000b04cd000604cd000004cd000004cd000b04cd
000604cd000004cd000004cd00a604cd00d604cd00a604cd00d604cd00a6
04cd00d604cd000504cd000504cd000004cd000004cd000304cd000304cd
000004cd000004cd00b404cd003804cd000004cd000004cd00b404cd0038
04cd000004cd000004cd00b404cd003804cd000004cd000004cd000a04cd
000a04cd000004cd000004cd000a04cd000a04cd000004cd000004cd000a
04cd000a04cd000004cd000004cd000a04cd000a04cd000004cd000004cd
000a04cd000a04cd000004cd000004cd010804cd007104cd000004cd0000
04cd010804cd007104cd000004cd000004cd010804cd007104cd000004cd
000004cd010804cd007104cd000004cd000004cd00fe04cd008e04cd0000
04cd000004cd00fe04cd008e04cd000004cd000004cd00fe04cd008e04cd
000004cd000004cd00fe04cd008e04cd000004cd000004cd00fe04cd008e
04cd000004cd000004cd011004cd009e04cd000004cd000004cd01f304cd
018404cd01b104cd01f304cd000004cd000004cd01b104cd01f304cd01b1
04cd01c804cd00c404cd00c004cd00c404cd00c004cd00c404cd00c004cd
00c404cd00c004cd00c404cd00c004cd00c404cd00c004cd00c404cd00c0
04cd00c404cd00c004cd000f04cd001d04cd00aa04cd007004cd000004cd
000004cd00c404cd00c004cd00aa04cd007604cd000004cd000004cd00aa
04cd007604cd005a04cd005a04cd005a04cd005a04cd01d104cd01f304cd
00e704cd015804cd016d04cd01c004cd01a004cd020a04cd017304cd0014
04cd000a04cd021b04cd021c04cd016b04cd01c004cd017304cd01cc04cd
017404cd017404cd01ad04cd003104cd01be04cd01be04cd021b04cd01c0
04cd000604cd000604cd000004cd000004cd000004cd000004cd000004cd
000004cd011a04cd011c04cd000004cd000004cd020104cd01b204cd0003
04cd000304cd000304cd001804cd009c04cd00b704cd009c04cd00d704cd
009c04cd00d704cd009c04cd00d704cd009c04cd00d704cd009c04cd00d7
04cd017304cd013a04cd016904cd008504cd021204cd021b04cd007604cd
008e04cd00f904cd010d04cd005704cd005704cd009704cd007f04cd007f
04cd001504cd002e04cd001204cd002504cd005104cd008f04cd000404cd
008f04cd00b304cd002d04cd001604cd005704cd002d04cd005704cd002d
04cd007f04cd007f04cd00ab04cdfffd04cd001604cd005704cd008004cd
00b504cd005804cd007204cd000004cd008004cd003b04cd001504cd00e5
04cd00e304cd005904cd00bf04cd00bb04cd004104cd001504cd000004cd
006c04cd006804cd003c04cd009104cd001604cd002d04cd00b304cd00b9
04cd00cf04cd00c404cd015604cd009204cd005d04cd009204cd008f04cd
003c04cd005304cd000004cd000004cd00d504cd00ed04cd00a104cd00a1
04cd00a104cd00db04cd00ab04cd00c404cd009004cd009204cd002d04cd
023c04cd01e704cd006504cd01eb04cd000804cd000804cd000a04cd0012
04cd000804cd001104cd000704cd000704cd000a04cd008004cd001104cd
009004cd012f04cd001104cd009004cd001204cd001004cd008004cd007d
04cd008004cd007d04cd005904cd00bf04cd006804cd009104cd006804cd
009104cd00a104cd008c04cd00b404cd000804cd000804cd000a04cd0080
04cd007d04cd000a04cd002d04cd002e04cd006c04cd001104cd009004cd
001104cd009004cd005804cd008004cd005804cd008004cd00e504cd00ba
04cd00e504cd00ba04cd006804cd009104cd006804cd009104cd005804cd
00ab04cd005804cd00ab04cd005304cd005b04cd005304cd005b04cd00b9
04cd00cf04cd008f04cd009204cd00ab04cd00ab04cd006b04cd005504cd
006b04cd008604cd00e704cd00d504cd00ed04cd001104cd009004cd0058
04cd008004cd006804cd009104cd012804cd006804cd009104cd006804cd
009104cd006804cd009104cd006304cd009504cd006804cd007e04cd002a
04cd002d04cd00ab04cd006a04cd007e04cd007e04cd008004cd004e04cd
009004cd009004cd006804cd008704cd008704cd007d04cd007d04cd00ab
04cd00a404cd009104cd005504cd006704cd006704cd00bd04cd020f04cd
00e504cd00bb04cd00bb04cd011204cd001104cd001504cd001504cd0015
04cd000004cd006c04cd003a04cd009104cd004e04cd007504cd009104cd
007304cd007304cd007304cd00ab04cd00db04cd00dc04cd00ab04cd008e
04cd008e04cd00cf04cd00b104cd00b104cd00b104cd00d104cd009204cd
009204cd005b04cd00b704cd005704cd003b04cd003804cd004104cd0092
04cd00ed04cd00a704cd008c04cd00ad04cd00aa04cd00b404cd00aa04cd
00ab04cd006804cd007b04cd008704cd00ab04cd006b04cd00b904cd006e
04cd009804cd008004cd00aa04cd00b404cd000a04cd000a04cd000a04cd
000a04cd006204cd000a04cd000a04cd000a04cd000a04cd00a904cd00ed
04cd011204cd011204cd016d04cd012d04cd012a04cd012a04cd012d04cd
00e804cd010d04cd020104cd010704cd01fd04cd012504cd01fd04cd020e
04cd020e04cd013b04cd014004cd006204cd009404cd007a04cd007a04cd
023604cd01bb04cd01bc04cd023604cd013c04cd01bc04cd01bc04cd01ff
04cd01ff04cd020e04cd020e04cd019804cd019804cd019804cd013c04cd
01a004cd010e04cd013304cd014d04cd015904cd013504cd014004cd013c
04cd013c04cd00db04cd013c04cd013c04cdffe504cd013a04cd020004cd
013f04cd01b104cd013b04cd013c04cd023604cd01d504cd013b04cd013a
04cd013a04cd01fd04cd012504cd012504cd031904cd01bc04cd01bc04cd
019804cd019804cd013c04cd01e704cd020e04cd019804cd019804cd0198
04cd013c04cd00b104cd00b104cd013f04cd01b104cd020804cd01ba04cd
01d404cd023604cd013c04cd012104cd013c04cd013c04cd013a04cd013a
04cd012804cd013c04cd000004cdffe504cd012804cd013c04cd000004cd
00a704cd00e604cd020e04cd013c04cd01aa04cd011e04cd01c304cd0200
04cdffe504cd01bc04cd01bb04cd012804cd012504cd010804cd023604cd
013c04cdffe504cd01d504cd019804cd012804cd012804cd012804cd016a
04cd01b704cd000004cd000004cd000004cd002704cd012804cd013004cd
015004cd012604cd011704cd013904cd010304cd011204cd00d104cd012d
04cd013b04cd00f504cd013504cd01bb04cd01bc04cd023604cd010404cd
005704cd006d04cd000004cd006d04cd009104cd003204cd00bc04cd0068
04cd009104cd007f04cd00cf04cd009f04cd009f04cd004004cd008b04cd
008c04cd00f004cd001504cd001504cd00ab04cd00ab04cd006b04cd0075
04cd00b904cd00b904cd008804cd00c304cd008004cd00ab04cd008104cd
00e704cd00bc04cd008004cd00ab04cd00b404cd006804cd00ab04cd00f9
04cd005804cd002804cd008004cd003a04cd001404cd009604cd002104cd
003904cd000004cd000c04cd001004cd003b04cd000004cd000504cd0029
04cd005004cd000004cd000504cd007904cd009704cd001d04cd004504cd
006804cd009104cd001a04cd003b04cd001a04cd003b04cd000004cd0005
04cd007904cd009104cd001404cd000a04cd00a704cd001404cd009604cd
007f04cd00b404cd00b404cd015904cd013c04cd013e04cd013e04cd0001
04cd000104cd002804cd003a04cd005704cd006604cd00b304cd002d04cd
002504cd003404cd007204cd009004cd007704cd007804cd001704cd0024
04cd001104cd001104cd000a04cd000704cd007f04cd00ab04cd007f04cd
00ab04cd008f04cd00a604cd000c04cd000c04cd002904cd004604cd0005
04cd000f04cd000504cd000f04cd00e504cdfffb04cd001404cd007704cd
007804cd002304cd003304cd006b04cd006b04cd006b04cd006b04cd0029
04cd004604cd001804cd001f04cd013a04cd001104cd009004cd001104cd
009004cd001204cd001004cd005804cd008004cd004204cd008004cdfffb
04cd001404cd007204cd009004cd00c304cd008c04cd002804cd003a04cd
002804cd003a04cd006804cd009104cd006804cd009104cd008104cd0082
04cd002c04cd009504cd002c04cd009504cd002c04cd009504cd002904cd
004604cd000204cd001804cd007404cd007e04cd001004cd001e04cd0007
04cd000a04cd005104cd005a04cd000a04cd000804cd000a04cd001404cd
008004cd00ab04cd008f04cd00a604cd01ab04cd014b04cd01dc04cd0225
04cd01b804cd01a504cd01d804cd013d04cd01a504cd01e404cd01a504cd
01a504cd034904cd00e204cd001404cd015604cd017e04cd019804cd01e4
04cd01a504cd00e104cd01e304cd01a504cd015604cd01ab04cd01e404cd
019804cd01a504cd000004cd01f004cd022404cd012f04cd012f04cd0128
04cd012804cd01dd04cd017b04cd012f04cd001104cd009004cd005704cd
002d04cd005704cd002d04cd005704cd002d04cd007f04cd00ab04cd009e
04cd007e04cd009e04cd007e04cd009e04cd007e04cd009e04cd007e04cd
009e04cd007e04cd005804cd008004cd005804cd008004cd005804cd0080
04cd005804cd008004cd005804cd008004cd009f04cd00d704cd008004cd
007d04cd006b04cd005504cd006b04cd005504cd006b04cd005504cd006b
04cd005504cd006b04cd005504cd00e504cd00bd04cd00e504cd00ba04cd
005904cd00bf04cd005904cd00bf04cd005904cd00bf04cd008004cd00bb
04cd008004cd00bb04cd008004cd00bb04cd008004cd00bb04cd001804cd
001504cd001804cd001504cd001804cd001504cd002e04cd006c04cd002e
04cd006c04cd002e04cd006c04cd002e04cd006c04cd006804cd009104cd
006804cd009104cd006804cd009104cd006804cd009104cd00b304cd002d
04cd00b304cd002d04cd005804cd00ab04cd005804cd00ab04cd005804cd
00ab04cd005804cd00ab04cd00b904cd00cf04cd00b904cd00cf04cd00b9
04cd00cf04cd00b904cd00cf04cd00b904cd00cf04cd008f04cd009204cd
008f04cd009204cd008f04cd009204cd008f04cd009204cd005304cd005b
04cd005304cd005b04cd005304cd005b04cd005304cd005b04cd005304cd
005b04cd001004cd003b04cd001004cd003b04cd002504cd003804cd0025
04cd003804cd005004cd006504cd005004cd006504cd006304cd009504cd
00d504cd00ed04cd00d504cd00ed04cd00d504cd00ed04cd005504cd0092
04cd003804cd009504cd009004cd00d704cd006204cd006204cd006204cd
006204cd006204cd006204cd006204cd006204cd000004cd000004cd0000
04cd000004cd000004cd000004cdff1b04cdff1b04cd011b04cd011b04cd
011b04cd011b04cd011b04cd011b04cd000004cd000004cd000004cd0000
04cd000004cd000004cd008b04cd008b04cd008b04cd008b04cd008b04cd
008b04cd008b04cd008b04cd000004cd000004cd000004cd000004cd0000
04cd000004cdff1b04cdff1b04cd020d04cd01e504cd01a004cd019604cd
01a004cd019604cd010a04cd010004cd000004cd000004cd000004cd0000
04cd000004cd000004cd000104cd000104cd009104cd009104cd009104cd
009104cd009104cd009104cd000004cd000004cdff9c04cdff9c04cdffc4
04cdffc404cd005704cd005704cd005704cd005704cd005704cd005704cd
005704cd005704cd000004cdff7404cdff7404cdff1b04cd007504cd0075
04cd007504cd007504cd007504cd007504cd007504cd007504cd000004cd
ffec04cdff5604cdff5604cdff7e04cdff7e04cdff1b04cdff0704cd0062
04cd006204cd011b04cd011b04cd008b04cd008b04cd018004cd01ab04cd
009104cd009104cd005704cd005704cd007504cd007504cd006204cd0062
04cd006204cd006204cd006204cd006204cd006204cd006204cd000004cd
000004cd000004cd000004cd000004cd000004cdff1b04cdff1b04cd008b
04cd008b04cd008b04cd008b04cd008b04cd008b04cd008b04cd008b04cd
000004cd000004cd000004cd000004cd000004cd000004cdff1b04cdff1b
04cd007504cd007504cd007504cd007504cd007504cd007504cd007504cd
007504cd000004cdffec04cdff5604cdff5604cdff7e04cdff7e04cdff1b
04cdff0704cd006204cd006204cd006204cd006204cd006204cd006204cd
006204cd001104cd001104cd000204cd000204cd001104cd020d04cd0236
04cd020d04cd012804cd012804cd008b04cd008b04cd008b04cd008b04cd
008b04cd000204cd000204cd000204cd000204cd006b04cd01be04cd01be
04cd012804cd011204cd011404cd011b04cd011b04cd010004cd010004cd
00e504cd00e504cd000204cd000204cd01be04cd01be04cd012804cd0057
04cd005704cd005704cd005704cd00ca04cd00ca04cd005704cd005704cd
006304cd006304cd000204cd000204cd000004cd010804cd010804cd0228
04cd007504cd007504cd007504cd007504cd007504cd000204cd000204cd
000204cd000204cd003c04cd022804cd020d04cd009904cd006b04cd0000
04cd000004cd000004cd000004cd00bd04cd00b404cd002604cd011204cd
003a04cd00e604cd002104cd002104cd01a204cd01a204cd01e404cd01e4
04cd01b104cd01bc04cd013b04cd013b04cd012804cd01cd04cd01e904cd
01e904cd01e904cd01e904cd013c04cd013c04cd014904cd01e404cd020e
04cd013a04cd01bd04cd01e404cd01e404cd011804cd020e04cd000004cd
000004cd000004cd00b304cd002d04cd003b04cd002b04cd002504cd00cf
04cd00ab04cd00cf04cd00cf04cd00cf04cd009004cd00b704cd010104cd
009e04cd00cf04cd001f04cd003a04cd009104cd008204cd009104cd00ab
04cd006504cd002304cd012404cd009104cd009104cd00a604cd008304cd
008304cd00a604cd005604cd009904cd001804cd00aa04cd003b04cd0038
04cd00ed04cd009004cd00b004cd009104cd009804cd003b04cd006b04cd
00a604cd001d04cd003304cd00e104cd00d604cd011104cd011104cd0116
04cd011704cd011704cd010804cd010704cd016604cd011404cd00fb04cd
011704cd00d404cd00f104cd00e704cd011204cd014b0513014c05130136
04cd0123010b00dd01280128010300d200fe010301300135013101310103
0150012800d1013b0126013c0126012600fe013b0117014c00d700f50136
015900fd01480120012a0150012d011700f5015900fd01310120012a0000
00000000000000000320011a018601920179013b015d024a01be021a015b
019e0151009000650000000000000000003a000d000a001e002a001d0016
001e009000df00b20103002b00b3003f0000000000000000000a0000007f
0018001f000b004700470011007f00ab0080008f00cf00ed0078038b01a2
011b01a000000023007f007f007f007f009801ab019802240177019800dc
019a01e201bf01bf01cd01be01da012a0025002500000000002500250000
000000250025000000000025002500000000002500250000000000250025
0000000000250025000000000110009e000000000110009e00000000019e
0151019e0151009000650006000600000000011a011c00000000011a011c
00000000011a011c00000000000b000600000000000b0006000000000003
0003000000000003000300000000000300030000000001b201b200000000
01b201b20000000000fe008e0000000000fe008e0000000000fe008e0000
000001080071000000000090006500900065000600060000000000000045
00be0000003c0000009b005f0059005700ed004e011900b5000000e300e4
002d00560036002d007e00d7000f00bf00bb0015006c002d00ab00cf00b1
003b006500ed005a002a007e003f00380090000700bd00ab00b10000008c
01030139010f01240131016401640103011e015002300175017501620173
013c00df00c400d100d5011e0114012601140154014e013b011701480113
011100f5017101710171013401430126012601ec013c01cd012801300126
01350135008000100058007f00ba00620062006200620062006200620062
0114011401140114010c010c010c010c0057005700570057005700570057
005701050105010c010c0057005700570057009c00d700bd000000000000
006e0000006e0000006e0000006e00000122000001ca000003f200000646
0000084c000009fe00000a5200000b0000000bae00000d6c00000e280000
0e8800000ebc00000f0800000fb4000011f600001300000014a200001650
0000178a000018e800001b2000001be800001e0000001fe80000206e0000
211a000021e0000022700000233a00002486000026b0000028f400002af0
00002c7000002e0000002fa60000312a000032fc00003570000036a80000
380e00003b2c00003bfc00003ec2000040b00000430c0000448400004702
0000494200004ada00004bd200004d7c00004f58000052c2000055b60000
57e200005954000059d800005a6000005ada00005ba200005be200005c3e
00005e3a00005fd800006146000062a2000063e00000653c000066ec0000
68fa000069d400006ad200006e2400006ed0000071b6000073d800007574
000077300000790400007a9600007d4600007e8e00008012000081dc0000
8582000088d800008b2600008c5e00008d8a00008de000008f4a00009036
00009080000090cc000090fa0000913000009172000091a6000091e20000
92140000924e0000928c000092cc0000930c0000935c0000938c000093c4
000093f8000094280000945a0000948a000094b8000094e8000095180000
95560000958e000095c4000095f40000962c000096680000969a000096ca
000096fa0000972c000097e000009878000099e400009b8e00009d6e0000
9dce00009f6e0000a1200000a3700000a54a0000a7ea0000a84a0000a8ca
0000a9fc0000acf00000aece0000b01a0000b12a0000b2420000b35c0000
b60c0000b7040000b7dc0000b8f20000b9ec0000bb440000bc9e0000bdbe
0000beca0000c0320000c2d20000c45a0000c5920000c6460000c6ba0000
c75c0000c87a0000ca5c0000cafc0000cc700000cdb20000ce860000cec0
0000cf020000cf320000d0ce0000d3360000d3840000d3d20000d45c0000
d4e60000d54c0000d5b20000d6980000d7400000d77a0000d7ae0000d7fa
0000d9c00000da460000dacc0000dca80000de660000df780000dfca0000
e01c0000e0b00000e3320000e3840000e3c40000e3f80000e43e0000e472
0000e4a80000e4da0000e5120000e5500000e5800000e5b00000e5ea0000
e61e0000e6540000e69c0000e74c0000e7ec0000e8b60000e9080000e97e
0000e9ca0000ea680000eb3c0000ec2e0000ecdc0000ed820000ef740000
f0f80000f1320000f1680000f19e0000f1dc0000f2cc0000f4760000f63e
0000f6720000f6a60000f8380000f97e0000f9fc0000fb520000fc4c0000
fd940000feae00010068000102b80001050a0001065e00010692000106c8
000106fa0001072a000107580001078c000107be000107f4000108280001
0a2000010a7000010aba00010af400010b3000010b8400010bd600010c16
00010dbe00010dce00010e2200010ea600010ee600010f1600010f480001
0f7a00010fb200010ff40001102c000110660001109a000110d000011114
0001114e00011182000111bc000111ee0001121e00011260000112900001
12c4000112f60001131a0001133e00011370000115140001155600011590
000115c4000115fe0001162e000116660001169a000116d0000117ca0001
197400011b2200011ca000011dd400011f400001201e000120c400012240
000122c6000123020001245e00012734000127d80001288c0001292e0001
29d000012ab800012b9a00012ca000012cee00012d9200012e6000012edc
00012f4400012fac0001301c0001304600013076000130ae000130e60001
311e000131560001319c000131e4000132260001326a000132ca00013310
00013364000133b60001340e0001347a000134cc00013524000135900001
35e20001363c000136a8000136fc00013754000137c0000138200001388a
0001391200013974000139de00013a6a00013ace00013b3000013bb40001
3c1200013c7600013cfa00013d8c00013e2600013ee600013f1200013f3e
00013f6c00013f9a00013fca0001441c00014ca8000154ea000155140001
554c00015590000155cc0001561a00015656000157300001579e00015884
000159e000015ae200015c8a00015da200015f5400016084000161e40001
62900001630a000163cc000164e40001674c0001693a00016966000169bc
000169f000016ba400016cb400016cde00016cfa00016d6800016da00001
6e1a00016e4e00016e8200016ec000016efa00016f2e00016f6200016f94
00016fcc000170140001704800017080000170b4000170f60001712a0001
716000017198000171c2000171f80001723800017436000176d6000178e8
0001791a0001794e00017984000179b8000179ee00017a1e00017b900001
7ce600017d2000017e2400017e4e00017e7200018014000180380001805c
00018080000180b00001821a000183c6000183f80001842c0001845e0001
848e000184b2000184d60001850c00018540000186de0001885c00018892
000188c8000188fa0001892e0001895e0001898e00018b7600018d360001
8d6e00018da400018de000018e1000018f3e00018f9000018fe600019016
0001904400019074000190a2000190b2000190ea00019122000191520001
9180000191b4000191e60001921e000192540001926400019274000193fe
000194d80001975400019a3200019ccc00019f2200019fac0001a0400001
a0500001a1200001a3840001a5aa0001a8320001a9600001aaa20001ac8c
0001ae560001ae8c0001ae9c0001aeac0001af600001af700001af800001
af900001afa00001afb00001b16c0001b17c0001b18c0001b3540001b364
0001b4f60001b5060001b63e0001b64e0001b65e0001b66e0001b8940001
ba2a0001ba620001baa00001bace0001bb020001bb360001bb6a0001bbac
0001bccc0001bdf00001bef20001c0640001c1820001c1ea0001c4120001
c5c20001c7160001c8060001c9a80001c9b80001ca7c0001cb9c0001ccee
0001ce900001cfc60001d1000001d1420001d1840001d1b80001d1e60001
d2200001d2700001d3fa0001d42c0001d5820001d5920001d5a20001d5e4
0001d5f40001d78a0001da000001dbe80001dc280001dc780001de300001
de400001df660001df760001e08c0001e1c60001e1d60001e5ea0001e770
0001e9240001e96a0001eb960001ecfe0001ed0e0001ed1e0001ed2e0001
eec00001eed00001eee00001eef00001f0cc0001f2840001f2940001f40a
0001f5cc0001f8ea0001fbee0001fd160001ff5c00020090000200c20002
0296000202d6000202e60002040c0002055600020666000207ba000207ca
00020b4600020c9800020e7000020eb2000210c000021220000214960002
16a2000216b20002183800021848000218580002192e00021b0400021cb4
00021cc400021e5a0002203200022292000224ea0002261a000228460002
2980000229b400022b9600022d6400022d9600022f8600022fb6000230da
000230ea000230fa0002313400023144000232d00002353a0002372a0002
3764000237a20002393a00023a2600023b1000023b4400023dc200023f82
00023fe2000240e4000241820002423800024276000242ea000243940002
43d8000244380002448200024512000245560002459c000245d800024628
00024670000246a8000246e000024756000248c20002493a00024a140002
4a8000024b0400024b5600024bce00024c5a00024d3600024d8200024e00
00024e9600024f840002501c0002511000025178000251d4000252900002
535400025404000254ca0002558e000256a400025786000257e6000258ce
00025960000259f600025a8a00025b2000025b6c00025bfe00025cf00002
5d6800025dae00025df600025e3c00025ec800025f8400025fb400025fe4
0002601400026044000260680002608c000262420002626e0002629e0002
62cc000262f0000263240002635e00026484000264fe0002653000026558
000265b4000265d8000266060002670400026804000268fa00026a700002
6bbc00026be600026d0200026d3400026d5800026d8600026db400026de6
00026f2a00026f66000270b20002717400027228000272c0000273a00002
74ae00027590000275be000276800002782200027864000278cc000279c0
000279e800027ae800027bbe00027c3e00027cbc00027d9a00027ec20002
7fd80002807e00028138000281f0000282940002835e00028438000284be
000285a200028602000287320002880200028894000289b200028ab40002
8bb600028bce00028c0200028c2800028f7800028fd80002907400029094
0002922600029418000295c4000297b8000299a0000299fe00029cd60002
9ce600029dc600029e0400029e3a00029e6000029e7600029eaa00029ec0
00029f1400029f6e00029fc40002a0160002a0720002a2a20002a2b80002
a2de0002a3120002a34e0002a4900002a5ea0002a7180002a83e0002a9ce
0002ab860002acdc0002ae500002af580002b0780002b0900002b0c80002
b1020002b1300002b1720002b1d60002b21a0002b3920002b3ea0002b56a
0002b6a20002b6de0002b70a0002b73e0002b7700002b7b20002ba500002
bc1c0002bd7c0002bf660002c0c00002c0e60002c11e0002c14e0002c386
0002c3b20002c4180002c4720002c6fe0002c7280002c9660002c9be0002
c9fa0002ca1a0002ca320002ca720002ca960002cace0002cb1c0002cb62
0002cbc20002cc220002cc520002cc960002ccd00002ce280002ce600002
cff00002d0080002d12a0002d1560002d2100002d41c0002d4420002d554
0002d59e0002d6700002d6a40002d6d00002d7140002d7440002d9120002
d99a0002d9f20002da660002da920002dae80002db1e0002db600002dbda
0002dc5a0002ddbc0002e0280002e0380002e0720002e0ba0002e0ea0002
e1160002e15c0002e1a20002e1ec0002e22c0002e25e0002e27e0002e2b4
0002e2f60002e36a0002e4000002e4180002e4300002e4480002e4600002
e4ae0002e4f80002e5200002e5540002e5900002e5ce0002e5f20002e622
0002e6660002e69a0002e6f40002e7480002e7600002e7780002e8720002
e9f20002eac60002ebfe0002ec2c0002ec5a0002ec720002ec9a0002ed4e
0002edf40002ee280002ee520002ef020002efe40002f0120002f0360002
f1ca0002f34a0002f4900002f5e40002f6140002f6440002f6780002f6ac
0002f7e60002f96c0002fa6e0002fbb40002fbe40002fc1c0002fc480002
fc740002fd640002fe840002ff7200030092000300dc0003012400030164
000301a6000302f60003044e000305400003065600030684000306c80003
06fe0003073a00030772000307ae000307f000030836000309b200030b5c
00030bb000030c0200030d9e00030f6000030f7000030f80000310660003
1166000311e4000312b0000313b0000313c0000314900003157a00031686
000317b2000317e400031818000318280003191200031a7a00031c400003
1d4e00031e7600031e8600031e9600031ed0000320ac000320ec00032124
000321520003218e000321c2000321f40003222c000322640003239a0003
24bc000324fc0003250e000325200003253200032568000325a0000325b2
000325c4000325d6000325e8000326060003262400032644000326820003
26c8000327380003274a0003275c0003276e0003278000032792000327a4
000327b6000327c8000327da0003280e00032846000328580003286a0003
287c000328b0000328f40003291200032924000329360003294800032966
000329780003298a000329c0000329f600032a4e00032a6e00032a800003
2a9200032aa400032ab600032ac800032ada00032b0400032b1600032b54
00032b9800032bb200032bc400032bd600032dba0003300a0003301c0003
302e0003304000033052000330640003307600033088000332d80003354a
000338780003388a0003389c000338ae000338c0000338d2000339000003
39200003394e00033990000339c2000339f600033a9a00033b7400033c34
00033e5200033f3800034034000340c80003417c000342c60003440c0003
45180003462a0003477e0003489400034a4000034b9800034cd400034e30
00034f5c0003504000035250000354b00003572c000359ca00035d140003
5d2a00035d4000035ee0000361720003639c000365260003669a0003681a
0003688a000368fa0003696e000369e200036a5600036ac000036b780003
6c2c00036cde00036d9200036e4c00036f0600036fc80003706e000370fa
00037138000372c6000373720003743c000374a40003750c0003757c0003
75ec000376a40003775c00037816000378d00003798a00037a4800037b06
00037bc400037bd600037be800037bfa00037c0c00037c1e00037c920003
7cfc00037dba00037dcc00037dde00037df000037e0200037e1400037e26
00037e3800037e4a00037e5c00037e6e00037f2800037fe20003809c0003
815600038180000381a6000381e40003821000038276000382d000038338
00038396000383ec0003843a00038490000384de00038540000385900003
85f400038652000386b4000387040003876c000387de0003883c00038888
000388ee0003893c0003896a00038992000389ba000389de00038a180003
8a4600038a8a00038ad600038b1c00038b6c00038ba000038be000038c14
00038c5400038c9c00038ce000038d0400038d2800038d4e00038d740003
8d9a00038dc000038de400038e0800038e4c00038e9800038ede00038f2e
00038f6200038fa600038fda0003901a0003905a0003909c000390ce0003
90fc000391320003916400039188000391ac000391dc0003920a00039236
0003925c00039282000392a8000392d20003930e0003933e0003936c0003
93b0000393de0003940800039440000394700003949e000394c4000394ea
0003951000039534000395580003957e000395ae000395dc000396180003
965200039682000396b2000396e2000397100003974000039796000397bc
0003982c0003984e000398de0003990800039992000399a800039a420003
9bc000039db800039f580003a1520003a21a0003a2dc0003a5380003a77c
0003a8e00003aa460003abd00003ad680003ae660003af5a0003b0380003
b11e0003b22c0003b3480003b4800003b6280003b7d20003b9060003b9e4
0003b9f40003bb080003bbe60003bd140003be160003be840003bf380003
c0120003c1880003c2220003c2ba0003c31a0003c3680003c3aa0003c40e
0003c44c0003c4840003c4ce0003c5140003c5a40003c6320003c6840003
c6b20003c6f80003c73c0003c7700003c7a20003c7f60003c84c0003c88c
0003c8c60003c8f60003c9260003c95a0003c9940003c9e60003ca4c0003
cab00003cb1c0003cb740003cbc60003cc320003cc820003cce20003cd40
0003cd980003cde80003ce200003ce5c0003ce920003ced40003cf120003
cf520003cf960003cfda0003d0200003d06e0003d0ae0003d0f00003d124
0003d1a40003d1f20003d2400003d2920003d2f40003d3320003d3680003
d3ca0003d4220003d4700003d4b60003d5140003d5c40003d6040003d642
0003d67a0003d6b40003d6f20003d7360003d75e0003d7860003d7d20003
d8200003d8740003d8c20003d9140003d9640003d9b40003da100003da4c
0003da880003dac60003db020003db4a0003db900003dbd20003dc1e0003
dc960003dd200003dd5a0003dd940003ddf20003de400003deae0003df32
0003df780003dfba0003dff80003e0360003e0860003e0d40003e1160003
e1540003e18e0003e1c40003e1f80003e2300003e2840003e2d40003e326
0003e37c0003e3c80003e4120003e45c0003e4ac0003e4fe0003e5540003
e5a60003e5f80003e6500003e6ac0003e7080003e7640003e7a60003e7f2
0003e8460003e8940003e8a40003e8b40003e8c40003e8d40003e9020003
e9300003e9620003e98a0003e9d40003ea2a0003ea8a0003eaee0003eb36
0003eb740003ebbc0003ebfc0003ec460003ec9a0003ece80003ed380003
ee260003ef4e0003ef860003efd00003f0180003f0660003f1400003f238
0003f2f60003f3d80003f4360003f4980003f4f00003f54c0003f58c0003
f5c60003f6200003f6780003f6e00003f7480003f7a80003f81e0003f852
0003f8860003f8be0003f8f40003f95e0003f9ce0003fa340003fa9a0003
fb040003fb840003fbec0003fc6e0003fcba0003fd060003fd540003fda2
0003fdd20003fe040003fe380003fe6a0003ff140003ffe6000400a00004
015a000401a2000401e20004023200040276000402b8000402fa0004033e
0004038a00040430000404dc0004057e0004062a0004068c000406d60004
071000040748000407b0000407f00004082a000408660004096600040aa4
00040ab400040ac400040b0600040b4800040b8200040bc200040c3c0004
0ca400040cfc00040d5e00040da800040df200040e3600040e6a00040ede
00040f0c00040f2a00040f6200040faa00040ff200041092000410a20004
11d4000413380004136e000413b6000414000004144e000414b600041526
000417200004193a0004197c000419be00041a2000041a8200041ac40004
1b0600041b4800041b8a00041bd600041c2200041c7200041cc200041e1a
00041fa000041fde0004201800042086000420e0000421260004216c0004
21bc000421f0000422240004225e0004229c000422d2000423e800042484
000424ce0004250a00042538000425480004270c0004296000042a120004
2b2600042c5c00042d3000042ea8000430ee0004332e0004336e0004339a
000434660004358e000435b0000436aa000436bc000437ac000438d60004
3ae400043b0c00043ba200043bb200043bd600043c1e00043c6400043cb0
00043cfa00043d5600043dba00043e1800043e7600043ed800043f620004
3fb20004400400044134000442a4000443040004437a000443da00044432
0004446c000444a2000444f80004454200044586000445d0000446140004
465c0004470c000447b4000447ea0004482a0004487c000448f200044966
0004498a00044a4200044b7200044c8a00044dcc00044efc00044fd40004
501e000450760004529e000455840004585800045aa800045c9200045fde
000462dc00046506000467020004690a00046ae400046cda00046eb20004
704a0004715e000472fa000473f80004757e0004772e000478fc00047a8a
00047a9a00047bf800047d0e00047ea8000480a40004816c000483ce0004
84be000486b6000488120004895a0004896a00048a1200048be600048d56
00048df000048f9e00049104000492200004934a0004935a000494ba0004
96020004976a0004994e00049b5c00049d9400049fa400049fb40004a072
0004a1a40004a2620004a3980004a4460004a6680004a7d00004a9040004
aa100004aaec0004abd60004ad440004ae960004afe20004b1d00004b3ae
0004b50e0004b6840004b80a0004b9900004b9c40004ba1c0004babc0004
bacc0004bd080004bf4c0004c2180004c3520004c3800004c3ba0004c5e8
0004c7d80004c97e0004c98e0004c9b60004ca0e0004ca780004caaa0004
cade0004cb0e0004cb3c0004cd3e0004cf2a0004cf5a0004cf880004cfb8
0004cfe80004d2700004d44a0004d47a0004d4a80004d4d80004d5060004
d5340004d6d20004d8780004da8e0004dac00004daf00004dc400004de1e
0004de4e0004de7c0004deb00004dee20004df120004df400004df740004
dfa80004dfd80004e0060004e03a0004e06c0004e09c0004e0ca0004e0fe
0004e1300004e1600004e18e0004e1c20004e1f40004e2240004e2520004
e2860004e2b80004e2e80004e3160004e33a0004e35e0004e38e0004e3bc
0004e5e40004e8020004e8320004e8620004e9720004ebfc0004ee720004
ef3c0004effe0004f02e0004f05c0004f1be0004f3be0004f3e60004f43e
0004f55a0004f58c0004f5c00004f5f00004f61e0004f6500004f6840004
f6b40004f6e20004f85a0004f9c80004fb100004fce00004fe44000500d2
00050264000503f6000505860005081a000509d400050b8e00050dde0005
100a000510e8000512de000512ee00051462000515d20005170e00051846
000519d800051b8c00051c4600051cb000051d1e00051e3e00051f4a0005
1fd80005216c000522dc0005245e000526180005276c000528b4000529c8
000529d800052b8a00052d9e00052f540005306200053170000532b20005
33ba000534f4000535bc0005368600053832000539de00053c3000053d42
00053e6000053f6a000540da000541b2000542b000054404000546140005
47500005482a0005499200054a7600054b8800054c5600054dca00054f20
000551ea00055348000554a2000555e20005575400055970000559800005
5bba00055d6200055d7200055e7200055f920005600a000561e200056366
000564e6000566b40005699c00056bfc00056e2400056faa0005724e0005
7408000575bc0005766c000579de00057a6400057b5c00057ca200057d20
00057dd800057e9000057f5a000580cc000582cc00058414000584500005
84b4000584f20005852e0005856c00058614000586c4000587f600058924
000589ba00058a4800058ad800058b6a00058b9e00058c1000058c7e0005
8cb200058ce600058d5800058dc600058e1000058e3e00058ee600058f94
00058fe00005902c0005908e000590c20005917c00059290000594100005
94720005963a000597c80005992c000599cc00059a2400059a8a00059b34
00059b6a00059ba200059c5000059c8a00059cf000059dcc00059e9e0005
9f3e00059f7200059fca0005a0960005a17e0005a22c0005a26a0005a2a6
0005a2e40005a3200005a3920005a4000005a44c0005a4980005a4d60005
a5240005a5d40005a6200005a66c0005a6ce0005a7020005a78e0005a818
0005a87e0005a95e0005a9b20005aa780005aafc0005ab300005ab780005
abf40005ac940005ad3e0005adea0005ae980005af7a0005afae0005afe6
0005b0400005b1260005b1620005b1a00005b21e0005b28c0005b3340005
b37c0005b3be0005b47a0005b5b40005b69a0005b6f40005b7620005b7d4
0005b8ba0005b8f60005b9c20005ba020005ba4a0005baa40005bafc0005
bb380005bcd20005be1a0005c00c0005c0600005c0a00005c3b20005c496
0005c4ea0005c52c0005c6820005c7b20005c8300005c9560005ca2a0005
cb900005ccf40005cdec0005cf500005d0080005d0e00005d2180005d3a6
0005d4180005d4860005d4c60005d67a0005d8380005d91e0005d9460005
d97a0005db100005dd0c0005decc0005e11c0005e2cc0005e4b80005e68e
0005e7400005e7e20005e93e0005ea0a0005ec1e0005ee0e0005efda0005
f19c0005f30e0005f49e0005f6a20005f9340005fc340005feaa0005fffc
0006016e0006034c000605900006068400060710000608a600060ac60006
0c3600060c4600060c5600060d5400060e4a00060e7a00060eaa00060ed8
00060f060006118600061350000614d6000616220006186e00061a9a0006
1c7200061e3c0006208c000622c80006250c000627260006293400062bd4
00062f6600063252000634100006354a0006378c0006396400063a800006
3ba200063bd600063c0800063f5400064228000643f8000645de000648de
00064b6c00064bcc00064bfa00064c2a00064dbe00064f10000650d80006
5136000651c80006521600065264000653dc000655c8000657ce0006598e
00065ab400065ba400065da80006603e00066230000663f0000666b40006
68e800066b3a00066d0000066efe000670b4000671d6000672ec000674fa
000676f20006799e00067c2c00067e3200068026000680ba0006815a0006
824c0006834800068492000685bc0006877a0006892c00068b9800068dba
00068dca00068dfa00068e28000690c0000692f400069442000695580006
96d0000698440006998200069aaa00069bec00069d0c00069ec20006a02c
0006a0da0006a10a0006a1380006a16c0006a19e0006a1ae0006a1be0006
a1ee0006a21c0006a2500006a2820006a2b60006a2e80006a31c0006a34e
0006a50a0006a51a0006a54a0006a5780006a5ac0006a5de0006a6120006
a6440006a6780006a6aa0006a6de0006a7100006a7400006a76e0006a7a2
0006a7d40006a8080006a83c0006a8700006a8a20006a8d60006a9080006
aa140006aa240006ac1a0006ae840006b0800006b20c0006b3aa0006b4d4
0006b61e0006b7540006b89e0006b9e20006bbc80006bd380006be1a0006
bf000006bf720006bff40006c0ce0006c1280006c1a40006c21a0006c28c
0006c3a40006c40e0006c4800006c51c0006c5800006c5e40006c6a00006
c8780006c9740006c9f00006ca2c0006ca9e0006cb080006cbc40006cc4c
0006ccb60006cdae0006ce220006ce960006ced20006cf480006d0600006
d0f80006d1320006d1bc0006d2480006d3640006d4840006d51a0006d5b0
0006d63a0006d6600006d6860006d6b60006d6e20006d7080006d72e0006
d7520006d7760006d7b80006d7f80006d8280006d8540006d87a0006d8a0
0006d8c40006d8e80006d90c0006d9300006d9540006d9780006d9aa0006
d9de0006da100006da440006da680006da8c0006dab00006dad40006db04
0006db320006db620006db920006dbc20006dbf00006dc200006dc500006
dc760006dc9c0006dcd00006dd040006dd2a0006dd500006dd740006dd98
0006ddbc0006dde00006de140006de5a0006de8c0006debc0006dee20006
df080006df2c0006df500006df760006df9c0006dfde0006e0200006e044
0006e0680006e08c0006e0b00006e0e00006e10e0006e13e0006e16c0006
e1920006e1b80006e1e80006e2160006e23c0006e2620006e2860006e2aa
0006e2ce0006e2f20006e3240006e3580006e38c0006e3c20006e3f40006
e4280006e45a0006e48e0006e4be0006e4ec0006e51c0006e54a0006e57a
0006e5a80006e5ce0006e5f40006e6360006e6760006e69a0006e6be0006
e6ee0006e71c0006e7420006e7680006e79a0006e7ce0006e8000006e834
0006e8760006e8b60006e8e60006e9160006e93c0006e9620006e9860006
e9aa0006e9ce0006e9f20006ea180006ea3e0006ea620006ea860006eaaa
0006eace0006eb000006eb340006eb680006eb9e0006ebce0006ebfc0006
ec220006ec480006ec780006eca60006eccc0006ecf20006ed220006ed50
0006ed840006edb60006ede60006ee140006ee440006ee720006ee980006
eebe0006eee20006ef060006ef2a0006ef5e0006ef900006efc20006eff0
0006f0200006f0500006f0800006f0b40006f0e80006f11c0006f1500006
f1840006f1b80006f1e80006f2180006f2540006f2940006f2d00006f30c
0006f3400006f3740006f3a40006f3d40006f4080006f43c0006f4700006
f4a40006f4d60006f5080006f5500006f5980006f5e00006f6280006f658
0006f6880006f6bc0006f6f00006f7240006f7580006f78c0006f7c00006
f7f00006f8200006f8660006f8ac0006f8f20006f9380006f96c0006f9a0
0006f9d00006fa000006fa340006fa680006fa9c0006fad00006fb040006
fb380006fb680006fb980006fbce0006fc040006fc3a0006fc700006fca6
0006fcdc0006fd0c0006fd3c0006fd700006fda40006fdd80006fe0c0006
fe3c0006fe6c0006fe9c0006fecc0006fefc0006ff2c0006ff5c0006ff8c
0006ffc00006fff4000700280007005c00070090000700c4000700f40007
01280007015c00070190000701c0000701f000070224000702580007028c
000702c0000702f4000703280007035600070384000703b4000703e40007
04140007044400070474000704a4000704d2000705000007052e0007055c
0007058a000705b8000705e60007061400070642000706700007069e0007
06cc000706fa000707280007076a000707ac000707f00007083400070878
000708bc000709000007094400070984000709c400070a1000070a5c0007
0aa800070af400070b3800070b7c00070bbe00070c0000070c4400070c88
00070ccc00070d1000070d5400070d9800070dd800070e1800070e6e0007
0ec400070f1a00070f7000070fb400070ff80007103800071078000710ba
000710fc0007113e00071180000711c200071204000712400007127c0007
12bc000712fc0007133c0007137c000713bc000713fc0007142a00071458
00071498000714bc000714fc0007152a0007156a0007159a000715ca0007
15fa0007162a0007164c000716a2000716e2000717380007181e00071998
000719d8000719fc00071a3c00071a6a00071aaa00071ada00071b0a0007
1b3a00071b6a00071b8c00071c2400071cb600071dda00071e0800071e36
00071e7c00071ec200071ef000071f2400071f5400071f8400071fb40007
1fe4000720760007210e000722380007226600072294000722da00072320
0007235000072380000723ae000723e20007241200072442000724720007
24a2000724d20007259c00072668000726e4000727220007274400072782
000727b0000727ee0007281e0007284e0007287c000728aa000728cc0007
29180007296e00072ab400072cca00072d0400072d3e00072db000072e1c
00072eb400072f32000731680007325e00073404000735260007366a0007
37cc00073838000738a4000739160007398200073a6200073ad800073ba4
00073c7600073d5800073dcc00073e0a00073e4800073e8400073ec00007
3f0800073f4600073fae0007401a000740ca000741b2000742bc0007432e
0007439a000744660007450e000745620007459a000745d00007470e0007
48bc000749ca00074b8e00074e6800074fc200074fd2000750da0007521a
000752fc0007530c0007538400075432000754420007556e0007557e0007
558e0007559e00075700000757100007588000075abc00075d3e00075ee2
00075fb20007607000076170000761800007631200076322000764640007
653c00076674000767e6000767f600076806000768160007699a00076b48
00076c7a00076c8a00076c9a00076caa00076cba00076e1800076e280007
6f8400077134000772520007738e000774880007755e00077636000777b8
000778aa0007791e000779e000077b7a00077bfa00077d3800077e360007
7f40000780520007820c0007830e00078464000784f00007860a000787e8
0007893e00078a9600078bec00078e2600078f86000790ea0007921a0007
9332000794cc00079666000797ec0007986a000799b200079b1600079c2e
00079d5400079e8800079f520007a01c0007a16c0007a2440007a3300007
a3fc0007a5400007a6960007a7720007a8de0007a9a60007aba00007acfc
0007ae740007aef20007afa60007b0960007b1ec0007b3740007b43a0007
b5dc0007b75c0007b8fe0007b9820007bac00007bb560007bc460007bcda
0007bd2a0007bedc0007bf760007c0a20007c2760007c4680007c5840007
c5d60007c7000007c76a0007c8420007c8760007c8aa0007c8e00007c916
0007c9560007c98e0007c9ce0007ca060007cbb80007cc100007cc980007
cd820007ceac0007cfe00007d0480007d0d20007d1220007d2140007d2b8
0007d3720007d3aa0007d4340007d4540007d4a40007d4e80007d58a0007
d5c40007d7fa0007db4a0007dcd80007dde20007def80007e1100007e344
0007e5880007e8100007eac40007ecfa0007edd40007ef4c0007f24c0007
f3aa0007f5000007f5380007f61e0007f7500007f7e20007f84a0007f9fa
0007fb6c0007fd440007ff360007ffca0008005a000800d80008012c0008
0166000801ca0008024600080412000804f60008053a000805d40008066c
000806ca000807e8000808b40008096a000809a0000809d600080a080008
0a4600080a8c00080ada00080b3200080b8600080be800080c4a00080cb8
00080d1800080d9800080e2200080eb600080f4000080fc8000810200008
1076000810c2000810f60008112a0008116000081194000811c4000811f8
0008123c00081272000812ba000812ec0008131c00081350000813a40008
140c0008144a00081484000814d80008153400081592000815ea000816fe
0008184200081874000818a6000818dc00081932000819660008199c0008
19da00081a1a00081a6000081ab000081afe00081b4a00081b8800081bca
00081c0a00081c4600081c7400081ca200081cd000081cfe00081d380008
1d7a00081db800081df400081e4e00081ea800081f0200081f5a00081fc4
0008202e0008208e000821040008213a00082170000821aa000821e40008
22140008224400082276000822a8000822e0000823180008234c00082378
000823de0008241a00082474000824c40008251a00082566000825ec0008
266c000826a4000826d80008272e0008277c0008289a000829f600082ac4
00082ba400082bea00082c2e00082c6600082c9e00082cd600082d140008
2d4200082d76000830380008336a0008354e0008381400083a7a00083d42
00083f5200084104000843ee000845ee000847be0008497600084aca0008
4ce400084f620008501e000850c20008530c0008547e000856a6000858b2
00085a6a00085ba600085de000085fe80008609a00086284000864580008
66c60008682800086aac00086c4000086dae000870440008718a00087354
00087520000876d00008787c00087aa600087cfc00087ef000087fac0008
817a000883060008845e00088640000887ac000887bc0008896000088bca
00088bda00088cbc00088d9800088da800088eee00088fd40008904a0008
90ca000891c8000892b200089330000893f80008949600089658000897dc
0008992c00089a7c00089b9c00089cc800089e6a0008a0920008a1440008
a28c0008a3e60008a5920008a68e0008a76c0008a8a00008a98e0008aacc
0008ac6a0008ae0c0008af1c0008aff60008b0de0008b1de0008b25a0008
b3f20008b55a0008b6a40008b7f20008b9ca0008bb0e0008bd020008bf0e
0008c1ee0008c3ac0008c4320008c48c0008c4e60008c5440008c5a20008
c60a0008c6720008c6e60008c7500008c7b00008c80a0008c86c0008c8ca
0008c92e0008c9960008ca060008ca740008cad40008cb340008cba00008
cc040008cc780008ccec0008cd680008cde80008ce780008cf080008cff6
0008d0e40008d1880008d2320008d3340008d4340008d5ec0008d7460008
d76a000100000c4f012200490083000500020010002f00550000039f0557
000400020000003a02be0000000300000000006a00000000000300000001
0016006a0000000300000002000e01300000000300000003005a013e0000
0003000000040016006a0000000300000005001801980000000300000006
001c01b0000000030000000700c6006a0000000300000008003000a60000
000300000009001c01cc000000030000000d029a01e80001000000000000
003504820001000000000001000b04b700010000000000020007051a0001
000000000003002d05210001000000000004000b04b70001000000000005
000c054e0001000000000006000e055a0001000000000007006304b70001
000000000008001804d50001000000000009000e0568000100000000000d
014d05760003000104030002000c06c30003000104050002001006d30003
000104060002000c06e30003000104070002001006ef0003000104080002
001006ff0003000104090000006a000000030001040900010016006a0003
000104090002000e01300003000104090003005a013e0003000104090004
0016006a0003000104090005001801980003000104090006001c01b00003
00010409000700c6006a0003000104090008003000a60003000104090009
001c01cc000300010409000d029a01e800030001040a0002000c06c30003
0001040b00020010070f00030001040c0002000c06c300030001040e0002
000c071f0003000104100002000e072f00030001041300020012073d0003
000104140002000c06c30003000104150002001006c30003000104160002
000c06c30003000104190002000e074f00030001041b00020010071f0003
0001041d0002000c06c300030001041f0002000c06c30003000104240002
000e075d00030001042a0002000e076b00030001042d0002000e07790003
0001080a0002000c06c30003000108160002000c06c3000300010c0a0002
000c06c3000300010c0c0002000c06c300a9002000320030003000360020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e0043006f007500720069006500720020004e00650077002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200069006e00200074
0068006500200055006e0069007400650064002000530074006100740065
007300200061006e0064002f006f00720020006f00740068006500720020
0063006f0075006e00740072006900650073002e0052006500670075006c
00610072004d006f006e006f0074007900700065003a0043006f00750072
0069006500720020004e00650077003a00760065007200730069006f006e
00200033002e0031003000200028004d006900630072006f0073006f0066
0074002900560065007200730069006f006e00200035002e003000300043
006f00750072006900650072004e0065007700500053004d00540048006f
00770061007200640020004b006500740074006c006500720059006f0075
0020006d0061007900200075007300650020007400680069007300200066
006f006e00740020006100730020007000650072006d0069007400740065
00640020006200790020007400680065002000450055004c004100200066
006f00720020007400680065002000700072006f00640075006300740020
0069006e0020007700680069006300680020007400680069007300200066
006f006e007400200069007300200069006e0063006c0075006400650064
00200074006f00200064006900730070006c0061007900200061006e0064
0020007000720069006e007400200063006f006e00740065006e0074002e
002000200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
a9203230303620546865204d6f6e6f7479706520436f72706f726174696f
6e2e20416c6c205269676874732052657365727665642e436f7572696572
204e657720697320612074726164656d61726b206f6620546865204d6f6e
6f7479706520436f72706f726174696f6e20696e2074686520556e697465
642053746174657320616e642f6f72206f7468657220636f756e74726965
732e526567756c61724d6f6e6f747970653a436f7572696572204e65773a
76657273696f6e20332e313020284d6963726f736f66742956657273696f
6e20352e3030436f75726965724e657750534d54486f77617264204b6574
746c6572596f75206d617920757365207468697320666f6e742061732070
65726d6974746564206279207468652045554c4120666f72207468652070
726f6475637420696e207768696368207468697320666f6e742069732069
6e636c7564656420746f20646973706c617920616e64207072696e742063
6f6e74656e742e2020596f75206d6179206f6e6c792028692920656d6265
64207468697320666f6e7420696e20636f6e74656e74206173207065726d
69747465642062792074686520656d62656464696e672072657374726963
74696f6e7320696e636c7564656420696e207468697320666f6e743b2061
6e6420286969292074656d706f726172696c7920646f776e6c6f61642074
68697320666f6e7420746f2061207072696e746572206f72206f74686572
206f75747075742064657669636520746f2068656c70207072696e742063
6f6e74656e742e004e006f0072006d0061006c006e0079006f0062007901
0d0065006a006e00e9006e006f0072006d0061006c005300740061006e00
64006100720064039a03b103bd03bf03bd03b903ba03ac004e006f007200
6d00610061006c0069004e006f0072006d00e1006c006e0065004e006f00
72006d0061006c0065005300740061006e00640061006100720064041e04
31044b0447043d044b0439004e0061007600610064006e006f0074006801
b001a10300006e00670041007200720075006e0074006100000000>
<ba0054ffc003c0b2553340b803c0b23a3340b803c0b30e243280b803c0b3
0b0d3280b803c0b209333f412f03c0007003c000af03c000cf03c0000400
5f03c0007f03c000af03c00003001f03c0003f03c0005f03c0008f03c000
0400a003bb00b003bb00c003bb00d003bb000400a003ba00b003ba00c003
ba00d003ba0004003f03b8000103b703b6b2241f40b803b4b3192432ef41
1a03b300ff03b300020391038b0021001f035e038b0021001f035f038b00
21001f038f038b002a001f0390038b002a001f038d038bb23b1f0f410903
8b000100ef038b00ff038b0002ffc0039cb2474f32b9ffc0039cb2373c32
b9ffc0039bb2474f32b9ffc0039bb3373c321f4119039c00b0039c00c003
9c00d0039c000400ef039c0001001f039b00b0039b00c0039b00d0039b00
0400ef039b0001ffc0039cb2212932b9ffc0039bb2212932b9ffc0039cb2
0f1632b9ffc0039bb20f1632410a035903560032001f035803560032001f
03570356b2321fbf41600355000100af0355000100a003540001008f0354
0001005f03540001004f03540001007f03550001007f03540001006f0355
0001006f03540001003f03550001003f03540001003f03540001002f0354
0001002f03540001001f03540001000f03540001035203530029001f0351
034a0029001f035003450025001f034f034a0025001f034e03490025001f
034d03470025001f034c034a0018001f034b03450012001f034a03460018
001f034903450044001f034803460044001f03470346b2441f3041700346
005f03450002000f0344001f0344002f0344003f03440004000f0344008f
034400a0034400df03440004005f0344007f034400cf03440003002f0344
0001034403440343034303410341000f0340001f0340002f034000030340
0340033f033f033e033e000f033d0001033d033d0040033c0001001f033c
002f033c003f033c004f033c005f033c00c0033c00d0033c0007033c033c
00200335003003350040033500500335006003350005000f032c002f032c
008f032c0003032c032d0024001f0321028c0014001f0320028c0014001f
031f028b001e001f031e028bb21e1f40410902b4005002b4006002b40070
02b4008002b4b205120f4114028b001f028b002f028b004f028b005f028b
007f028b009f028b00af028b0008003f028b004f028b400b023f023f034f
024f030440b80329b33c3c3240b80329b333363240b80329b31c1d3240b8
0329b30c1a320f41720329007f0329009f03290003000f0329002f032900
3f03290003000f0329001f0329000200af032700bf032700cf032700df03
270004000f0327004f0327005f0327008f0327009f032700af0327000600
bf032700ef032700ff03270003006f0327007f0327008f0327009f032700
af03270005000f0327001f0327002f0327004f0327005f03270005000f03
28002f0328005f0328007f032800af0328000500df03280001000f032700
0f032800500328008f032800bf0328000500df03220001008f0322000100
3f0322004f03220002002f0322003f03220002000f0322001f0322b20209
0fb8028bb2013a0f4137028c004f028c0002000f028d002f028d003f028d
0003002f028b0001002f028c003f028c004f028c008f028c00af028c0005
03b903b9032903290327032703280328032203220321032103200320031f
031f031e031e02900290028f028f028e028e028d028d028c028c028b028b
4014af2bbf2b025f356f357f358f359f35af35bf3507bb02610261026002
60400a0016160000001211081a41100204005c000d01fa005c000d01ad00
5c000d0172005c000d0140005c000d0117401a5c0de45c0dc85c0d995c0d
955c0d585c0d4e5c0d465c0d2f5c0db8016240172b0ddb2b0d902b0d562b
0d362b0d352b0d332b0d292b0d411101590157000d00be0157000d004201
57000d00320157000d00220157000d001d0157b20d0009bc015b00210801
001f0127b421811fe521b80401b21f8321b80801b21f8221b80401b21f5b
21b80401b21f3b21b80801b61f3021671f2c21b80401b21f2621b80401b2
1f2421bd0401001f005501ac0007012b402c07c9075f07400739072e072d
072807270723071f071408120810080e080c080a08080806080408020800
0814b8ffe0402b0000010014061000000100060400000100041000000100
1002000001000200000001000002010802004a00b013034b024b5342014b
b0c063004b6220b0f65323b8010a515ab005234201b0124b004b544218b0
372b4bb807ff52b0382b4bb009505b58b101018e59b0382bb00288b80100
5458b801ffb101018e851bb0124358b90001012c858d1bb90001012c858d
59594bb0095058b104018d8d590016763f183f123e113946443e11394644
3e113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b
2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b18b0372b1db0964b5358b0aa1d59
b0324b5358b0ff1d594bb8040153205c58b9023802364544b90237023645
445958b90a800238455258b902380a804459594bb8040153205c58b90020
02384544b90021023845445958b90a800020455258b900200a804459594b
b8040153205c58b9001e02374544b90025023745445958b90a80001e4552
58b9001e0a804459594bb8040153205c58b13d214544b1212145445958b9
0a80003d455258b9003d0a804459594bb8040153205c58b167214544b121
2145445958b90a800067455258b900670a804459594bb8030153205c58b1
21214544b1212145445958b907e00021455258b9002107e04459594bb803
0153205c58b121214544b11e2145445958b907e00021455258b9002107e0
4459594bb8030153205c58b121214544b1252145445958b907e000214552
58b9002107e04459592b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b9004a01d6b1437a45
6523456023456560234560b08b766818b080622020b9004301d645652345
20b003266062636820b003266165b801d6236544b043234420b14a7a4565
234520b003266062636820b003266165b07a236544b04a2344b1007a4554
58b17a406544b24a404a4523614459b347612aad45652345602345656023
4560b089766818b080622020b12a614565234520b003266062636820b003
266165b061236544b02a234420b147ad4565234520b003266062636820b0
03266165b0ad236544b0472344b100ad455458b1ad406544b24740474523
6144594b5342014b5058b108004259435c58b108004259b3020b0a124358
601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
001845694445694473731845694445694445694445694445694445694445
694445694445694445694445694445694445694445694445694473737374
5e735e737373737473737473737374757373742b2b2b2b00730073740043
5c58410c001f028b001f028d0002000f028b000f028c000f028d00037373
5974002b2b2b2b2b73750045694473744569447345694445694445694473
4569444569444569447574737301732b2b2b2b2b2b2b2b2b2b2b2b007373
7373737373737373737373737373732b2b2b012b002b012b002b01737500
7375012b2b002b2b0073752b2b2b2b2b2b0173012b012b73017300737374
752b2b2b2b2b2b00000000>
[15357 15625 16089 15089 16153 16309 16373 16193 15513 16373 16261 16209 16281
16309 15721 16373 15929 15313 16073 16317 15993 14761 16301 16141 15129 16149
15965 16289 16345 15921 15749 16333 16085 13945 16041 14073 8391 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 4020 19 <000200e5ffe203e805050019002f01adb312020a23bafff20003fff4b22d
08294109fff20028fff40027fff70016fff70015fff7b61c0e090e080e02
bafff80010fff2b21d0e2dbafff2002afff2402329051c0e1f0e22126d08
1e1c12002e0127050d22230e213d122c3d051205050d1a3d00b802ccb631
243d0e1930a1ba01060018012c852b4e10f44ded10f6ed003f3f10ed10ed
12393911123911391112393931304379405a022e10261819171916191519
141905061c1b1d1b1e1b1f1b04062726282629262a2604060b0c0a0c090c
080c070c05060326221124400020131a40012b062540002d042f4001230f
2140011b19214001260c2c40002e022c40002b2b2b2b012b2b2b2b2b2a2a
2a2a2b810038383838383838380138383838383838383838383838435c58
4015111e13193f141e11173f111e11173f161e1e123f22b8fffb40401e12
3f27141c113f27141b103f2714190f3f2714170e3f2314170e3f2714160d
3f2314160d3f03141e123f031e120b3f2d0a120b3f161e120b3f1d141921
3f22b8ffec401719213f0f14171f3f2314171f3f020a10113e170a10113e
012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b590115100706
232226272626272635351037363332161716161716073426272627262322
0215151416171617163332123503e881659a4a832e1d450f1781659a4b82
2e1e44101654432a192839478da0432b182839488ca002dbd0fef19e7c3b
3521923d5673d001109e7c3b3522923c567f77cd3d231923fee0c0b977ce
3d2219240121c000>CourierNewPSMT AddT42Char 
2 5712 23 <000200d6000003d704e7001d002100d1400d00030020021e21051d1f1c16
19b801e6b61d1dbe160f1512b8016040120e0ebe15202121670203140202
0302211f20b8015bb703030405211e0d1eb8015bb2000e00b802f2b21d1d
1cbb015b0016000f015bb2161503b80283400f01050e671d1d1f000f1e01
001e011eba026e0021015b400b0001010119220404150ca1ba01d2001801
24852b003f3f014e10f4714dfdf65d713c3c3c10fd3c10e400103ced10fd
3c10ee3c10ed3c103c3c103c10fd3c113905872e2b7d10c4180010ed0110
f5d43c0010ed0110f5d43c0f313071012135013311333216151406232311
333216151406232122263534363333111123010303fdd301d3af461f1a1a
1f46461f1a1a1ffec81f1a1a1f9d2cfe57015f610327fccc17131218fef5
1713121818121317015f02dffd21>CourierNewPSMT AddT42Char 
2 7144 27 <000300e7ffe203e705050019002500310187404412a722ca00ee00ee0c04
1a041d152b2d572b6502050b0e04181b0e14188a1894019a089a0b93279f
2b9c2da901a327b502bf0aba0cba2bcd0aca2b137901a5210231142db8ff
ecb21c231eb8ffddb230232ebaffdd0015fff8b41108282824b8ffddb22a
2822baffec0025ffeab2272221b8ffec40122b284008233d2929061d3d13
052f3d060d23b801d9401029291610263d03e11a3d3f164f160216b801ed
400b33203d10e12c3d091932a1ba01060018012c852b4e10f44dedf4ed10
f45dedf4ed1112392fe6003fed3fed12392fed3130437940302d311b1f11
1504081e122040001c141a40012e072c400030052640011f111d40011b15
1d40012d082f400031042f40002b2b2b2b012b2b2b2b8181818100383838
3838383838013838383838383838005d015d710071435c58b9002bffe8b3
1e123f21b8ffe8b3170e3f21b8ffe84030160d3f0518170e3f0518160d3f
0118170e3f0118160d3f0518140c3f15181e123f1518170e3f1518160d3f
1518140c3f012b2b2b2b2b2b2b2b2b2b2b2b590116161514062322263534
363726272635343633321615140706373426232206151416333236133426
2322061514163332360313696be0a0a0e06b6a5c2a3ad59697d43a290da1
7574a19f76779f17ac8080acad7f7fad028b33a76095dada955fa7343539
51628acfcf8a62503ae96c9b9c6a629393fe076fa4a46e72a8a8>CourierNewPSMT AddT42Char 
3 9180 70 <000100abffdf044b0380002a00f0b5210a0b0f3f15b8fff6402c0b0f3fc7
15dc25d927e01fe021eb25ea27072415271644204d254d2755205d255a27
6a0f6a19692589190c16b8fff240731314591356156b256627f61a05061a
1910151a29102912251a8a109b109618951aa515a5190c16232612110f19
141b010003080e191c170f0d0003110b0088112129070bb304061ca21721
230b0e3b0859a01f01901fc01f021f1a2c142126400f093fa026010f261f
2690260326192bc48e18b8012c852b4e10f45d71012b4ded4e10f65d714d
f4ed003feded3fed3fede411121739111239011112173912393911391112
39313000715d383801715d012b2b01353436333216151506062322262726
26232206151416333236373633321615140706232200353400333203c518
12131801171311170206af94bbc2d6aa62cb521510111765a3c8cbfefb01
0bcbc1030d1c1f1a1a1fbe1f1a171b4780ea97a3d448501417112b426b01
03c7cb010c00>CourierNewPSMT AddT42Char 
3 9894 72 <00020080ffdf042f03800019002000d040690a1699150232024202520263
02c602c613ca19da12da19dc1be318e51ffa160d191c2a1c3402381e4a1b
4c1f5c1b5a1f6f1b6c1f7e1b8c1b991c991eb7050f7516ba1cc403c412c9
1cc91e0608c5111a2020000101111d2117070421110b0c541a3ba0000170
000100b801e5401722203b013ba014016f14bf14cf14df14041419212aac
18b8012c852b4e10f45d714deded10f65d71ede4003fed3fed12392f3cfd
3c10ed3130004bb00c534bb024515a58b2161406b8fff0b41b141f1e02b8
ffec383838383859005d71015d7101211616333236373633321615140706
0623220035340033320007262623220607042dfca816e5a95ece41130e10
181030f581d8fedf010fc8ce010a5719d59393d41a019da3c73e330f1911
11103257011bc9b70106fef3818baeac8d00>CourierNewPSMT AddT42Char 
4 3198 91 <000100650000046a03620043029240951f111f12021238115711021b0001
10001f2260016d126f216f236043c301c310ce12ce21cc23cc32c234c243
0f0800180098220300320112431112432310222310213433320121343223
10121020013214010132344312121220213414212134023b013b0f3b103b
0a133b123b213b203b1a313b323b243b233b2a423b433b353b343b3b4043
433f38383f2323272e2e273f590534b8012eb420439a3f10b801e0401b01
01050c2121160c0c0500160116161d019a0f056f0502051a4532b801e0b3
239a2712b801e0401b219a27590f1d2f1d4f1d5f1d6f1d051d19440a0a1a
0a2a063b06e6ba01070018012c852b003f3f3f3f014e10f45d4de419f418
ed1910f418ed4e10f65d194de41812392f5d11392f1911392f1112392f18
ed1910e41aed1810e411392f1912392f1811392f1912392f1a001810eded
eded10edededed10edededed10edededed05872e2b435c58b90012ffcab3
19323f12b8ffd4b3172d3f12b8ffacb314283f12b8fff6b312233f12b8ff
e2b30e173f12b8ffdeb21b3c3e2b2b2b2b2b2b59877dc4872e182b435c58
4023103619323f102c172d3f104014283f100a12233f101e0e173f101e0d
163f10221b3c3e2b2b2b2b2b2b2b59877dc40f0f0f0fb10602435458b511
180d0f3433b8ffe8b20d0f34002b2b59313001715d005d71435c58b90033
ffe24009120b3f111e0b123f33b8ffe2404a0b123f110a16173e110a1112
3e43411e123f01411e123f43371c113f01371c113f43371b103f01371b10
3f4314190f3f0114190f3f210a1d203e340f1d203e3214191b3e10141015
3f32b8ffecb310153f12b8ffecb310153f43b8ffc4b310143e01b8ffc440
0d10143e233c10143e213c10143e012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b002b2b2b2b2b59005d010132161615140623212226353436333301
013332161514062321222635343636330101222626353436333332161514
062323010123222635343633333216151406062302a0018126140f1a1ffe
f21f1a1a1f8bfeb9febb8c1e1a1a1efeef1e1a0f13260181feaa24130f1a
1fe51f19191f64011b011d641e1b1a1fe51e1a0f132401c5fe8f07160d12
18181213170139fec71713121818120d16070171014808160d1218181312
18feef01111813121818130c1608>CourierNewPSMT AddT42Char 
2 0 0 <00020067000004670500000300070046b10607b8010cb40201000504b801
0cb403000a0605b8010cb60303021a090704b8010cb6010019084f7b182b
4e10f43c4dfd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111
25211121670400fc2003c0fc400500fb002004c0>CourierNewPSMT AddT42Char 
CourierNewPSMT /CharStrings get begin
/zero 19 def
/four 23 def
/eight 27 def
/c 70 def
/e 72 def
/x 91 def
end
CourierNewPSMT /Encoding get
dup 48 /zero put
dup 52 /four put
dup 56 /eight put
dup 99 /c put
dup 101 /e put
dup 120 /x put
pop
end
%ADOEndSubsetFont
/PRAQIW+CourierNewPSMT /CourierNewPSMT findfont ct_VMDictPut
/PRAQIW+CourierNewPSMT*1 
[48{/.notdef}rp /zero 3{/.notdef}rp /four 3{/.notdef}rp /eight 42{/.notdef}rp /c 
/.notdef /e 18{/.notdef}rp /x 135{/.notdef}rp]
PRAQIW+CourierNewPSMT nf
PRAQIW+CourierNewPSMT*1 [10.02 0 0 -10.02 0 0 ]msf
193.2 94.045 mo
(0x00e0)
[6.00204 6.00204 6.00203 6.00204 6.00204 0 ]xsh
241.196 94.045 mo
(0x00e4)
[6.00204 6.00204 6.00204 6.00204 6.00201 0 ]xsh
286.306 94.045 mo
(0x00e8)
[6.00204 6.00204 6.00204 6.00204 6.00201 0 ]xsh
334.302 94.045 mo
(0x00ec)
[6.00204 6.00204 6.00204 6.00204 6.00201 0 ]xsh
/PRAQIW+CourierNewPSMT*1 uf
/PRAQIW+CourierNewPSMT uf
/CourierNewPSMT uf
1.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
216 82.875 mo
216 69.875 li
.286717 1 1 .377844 cmyk
@
213.001 70.8753 mo
215.999 64.8753 li
219.001 70.8743 li
cp
ef
264 82.875 mo
264 69.875 li
@
261 70.8753 mo
263.999 64.8753 li
267 70.8743 li
cp
ef
309.108 82.875 mo
309.108 69.875 li
@
306.108 70.8753 mo
309.107 64.8753 li
312.108 70.8743 li
cp
ef
357.108 82.875 mo
357.108 69.875 li
@
354.108 70.8753 mo
357.107 64.8753 li
360.108 70.8743 li
cp
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
