# #################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
# 
# Include your name and ID here.
# 
# Describe how and why you modified the baseline code.
# This code unrolls the main loop by a factor of 17.
# It finishes by jumping to the appropriate position in a code
# sequence that copies the possible remaining elements
# #################################################################

# Do not modify this portion
# Function prologue
ncopy:
	pushl %ebp              # Save old frame pointer
	rrmovl %esp,%ebp        # Set up new frame pointer
	pushl %esi              # Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx     # src
	mrmovl 12(%ebp),%ecx    # dst
	mrmovl 16(%ebp),%edx    # len

# #################################################################
# You can modify this portion

	xorl %eax,%eax          # count = 0
	iaddl $-17, %edx        # lmu = len - 17
	jl SkipLoop             # If < 0, skip loop

# Main loop.  Copy 17 elements per iteration
Loop:
	mrmovl 0(%ebx), %esi    # read val from src+0
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 0(%ecx)    # Store val at dst+0
	mrmovl 4(%ebx), %esi    # read val from src+1
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 4(%ecx)    # Store val at dst+1
	mrmovl 8(%ebx), %esi    # read val from src+2
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 8(%ecx)    # Store val at dst+2
	mrmovl 12(%ebx), %esi   # read val from src+3
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 12(%ecx)   # Store val at dst+3
	mrmovl 16(%ebx), %esi   # read val from src+4
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 16(%ecx)   # Store val at dst+4
	mrmovl 20(%ebx), %esi   # read val from src+5
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 20(%ecx)   # Store val at dst+5
	mrmovl 24(%ebx), %esi   # read val from src+6
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 24(%ecx)   # Store val at dst+6
	mrmovl 28(%ebx), %esi   # read val from src+7
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 28(%ecx)   # Store val at dst+7
	mrmovl 32(%ebx), %esi   # read val from src+8
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 32(%ecx)   # Store val at dst+8
	mrmovl 36(%ebx), %esi   # read val from src+9
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 36(%ecx)   # Store val at dst+9
	mrmovl 40(%ebx), %esi   # read val from src+10
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 40(%ecx)   # Store val at dst+10
	mrmovl 44(%ebx), %esi   # read val from src+11
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 44(%ecx)   # Store val at dst+11
	mrmovl 48(%ebx), %esi   # read val from src+12
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 48(%ecx)   # Store val at dst+12
	mrmovl 52(%ebx), %esi   # read val from src+13
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 52(%ecx)   # Store val at dst+13
	mrmovl 56(%ebx), %esi   # read val from src+14
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 56(%ecx)   # Store val at dst+14
	mrmovl 60(%ebx), %esi   # read val from src+15
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 60(%ecx)   # Store val at dst+15
	mrmovl 64(%ebx), %esi   # read val from src+16
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 64(%ecx)   # Store val at dst+16
	iaddl $68, %ebx         # src+=17
	iaddl $68, %ecx         # dst+=17
	iaddl $-17, %edx        # lmu-=17
	jge Loop                # if lmu >= 0, goto Loop
SkipLoop:
# Finish remaining elements

# Find jump offset at table position (-lmu-1)
	irmovl $-1, %esi
	subl %edx, %esi         # -1-lmu
	addl %esi, %esi         # 2*(-1-lmu)
	addl %esi, %esi         # 4*(-1-lmu)
	mrmovl JTab(%esi), %edx # Fetch offset
	pushl %edx              # Put jump target on stack
	ret                     # Jump to it
jstart:                         # Copying code for remaining possible elements
# Completion code
Copied0:
	mrmovl 60(%ebx), %esi   # read val from src+15
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 60(%ecx)   # Store val at dst+15
Copied1:
	mrmovl 56(%ebx), %esi   # read val from src+14
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 56(%ecx)   # Store val at dst+14
Copied2:
	mrmovl 52(%ebx), %esi   # read val from src+13
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 52(%ecx)   # Store val at dst+13
Copied3:
	mrmovl 48(%ebx), %esi   # read val from src+12
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 48(%ecx)   # Store val at dst+12
Copied4:
	mrmovl 44(%ebx), %esi   # read val from src+11
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 44(%ecx)   # Store val at dst+11
Copied5:
	mrmovl 40(%ebx), %esi   # read val from src+10
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 40(%ecx)   # Store val at dst+10
Copied6:
	mrmovl 36(%ebx), %esi   # read val from src+9
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 36(%ecx)   # Store val at dst+9
Copied7:
	mrmovl 32(%ebx), %esi   # read val from src+8
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 32(%ecx)   # Store val at dst+8
Copied8:
	mrmovl 28(%ebx), %esi   # read val from src+7
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 28(%ecx)   # Store val at dst+7
Copied9:
	mrmovl 24(%ebx), %esi   # read val from src+6
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 24(%ecx)   # Store val at dst+6
Copied10:
	mrmovl 20(%ebx), %esi   # read val from src+5
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 20(%ecx)   # Store val at dst+5
Copied11:
	mrmovl 16(%ebx), %esi   # read val from src+4
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 16(%ecx)   # Store val at dst+4
Copied12:
	mrmovl 12(%ebx), %esi   # read val from src+3
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 12(%ecx)   # Store val at dst+3
Copied13:
	mrmovl 8(%ebx), %esi    # read val from src+2
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 8(%ecx)    # Store val at dst+2
Copied14:
	mrmovl 4(%ebx), %esi    # read val from src+1
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 4(%ecx)    # Store val at dst+1
Copied15:
	mrmovl 0(%ebx), %esi    # read val from src+0
	rrmovl %eax, %edi       # Copy count
	iaddl $1, %edi          # count+1
	andl %esi, %esi         # Test val
	cmovg %edi, %eax        # If val > 0, count = count+1
	rmmovl %esi, 0(%ecx)    # Store val at dst+0
Copied16:

# #################################################################

# Do not modify the following section of code
# Function epilogue
Done:
	popl %edi
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
# #################################################################
# # Jump table
JTab:
	.long Copied0
	.long Copied1
	.long Copied2
	.long Copied3
	.long Copied4
	.long Copied5
	.long Copied6
	.long Copied7
	.long Copied8
	.long Copied9
	.long Copied10
	.long Copied11
	.long Copied12
	.long Copied13
	.long Copied14
	.long Copied15
	.long Copied16
# ##################################################################
# # Keep the following label at the end of your function
End:
