
CS:APP Architecture Lab Part A: Grading Sheet for droh

***************
Problem 0: sum.ys
***************
Running yas sum.ys...
Running yis sum.yo...
Stopped in 31 steps at PC = 0x15.  Status 'HLT', CC Z=1 S=0 O=0
Changes to registers:
%eax:	0x00000000	0x00000cba
%ecx:	0x00000000	0x00000c00
%esp:	0x00000000	0x000000fc
%ebp:	0x00000000	0x00000100

Changes to memory:
0x00f4:	0x00000000	0x00000100
0x00f8:	0x00000000	0x00000015
0x00fc:	0x00000000	0x00000018

Score: 10/10

***************
Problem 1: rsum.ys
***************
Running yas rsum.ys...
Running yis rsum.yo...
Stopped in 65 steps at PC = 0x15.  Status 'HLT', CC Z=0 S=0 O=0
Changes to registers:
%eax:	0x00000000	0x00000cba
%edx:	0x00000000	0x00000018
%esp:	0x00000000	0x000000fc
%ebp:	0x00000000	0x00000100

Changes to memory:
0x00c0:	0x00000000	0x00000c00
0x00c4:	0x00000000	0x000000d4
0x00c8:	0x00000000	0x00000056
0x00d0:	0x00000000	0x000000b0
0x00d4:	0x00000000	0x000000e4
0x00d8:	0x00000000	0x00000056
0x00dc:	0x00000000	0x00000028
0x00e0:	0x00000000	0x0000000a
0x00e4:	0x00000000	0x000000f4
0x00e8:	0x00000000	0x00000056
0x00ec:	0x00000000	0x00000020
0x00f4:	0x00000000	0x00000100
0x00f8:	0x00000000	0x00000015
0x00fc:	0x00000000	0x00000018

Score: 10/10

***************
Problem 2: copy.ys
***************
Running yas copy.ys...
Running yis copy.yo...
Stopped in 52 steps at PC = 0x25.  Status 'HLT', CC Z=1 S=0 O=0
Changes to registers:
%eax:	0x00000000	0x00000cba
%ecx:	0x00000000	0x00000040
%ebx:	0x00000000	0x00000034
%esp:	0x00000000	0x000000f4
%ebp:	0x00000000	0x00000100
%esi:	0x00000000	0x00000cba
%edi:	0x00000000	0x00000004

Changes to memory:
0x0034:	0x00000111	0x0000000a
0x0038:	0x00000222	0x000000b0
0x003c:	0x00000333	0x00000c00
0x00ec:	0x00000000	0x00000100
0x00f0:	0x00000000	0x00000025
0x00f4:	0x00000000	0x00000028
0x00f8:	0x00000000	0x00000034
0x00fc:	0x00000000	0x00000003

Score: 10/10

PARTA_SCORES = 10:10:10


**********
sum.ys
**********
# Initial code
	irmovl Stack,%esp
	rrmovl %esp,%ebp
	irmovl ele1, %edx
	pushl %edx
	call sum_list
	halt

# Sample linked list
.align 4
ele1:
	.long 0x00a
	.long ele2
ele2:
	.long 0x0b0
	.long ele3
ele3:
	.long 0xc00
	.long 0

sum_list:
	pushl %ebp		# Save %ebp
	rrmovl %esp,%ebp	# Set Frame ptr
	xorl %eax,%eax		# val = 0
	rrmovl %esp,%ebp	# Set frame ptr
	mrmovl 8(%ebp),%edx	# Get ls
	andl %edx,%edx		# ls == 0?
	je L4			# Yes, goto done
L5:			# Loop:
	mrmovl (%edx),%ecx	# t = ls->val
	addl %ecx,%eax		# val += t
	mrmovl 4(%edx),%edx	# ls = ls->next
	andl %edx,%edx		# ls == 0?
	jne L5			# No, goto done
L4:			# Done:
	rrmovl %ebp,%esp	# Restore %esp
	popl %ebp		# Restore %ebp
	ret			# Return
.pos 0x100
Stack:


**********
rsum.ys
**********
# Initial code
	irmovl Stack,%esp
	rrmovl %esp,%ebp
	irmovl ele1, %edx
	pushl %edx
	call rsum_list
	halt

# Sample linked list
.align 4
ele1:
	.long 0x00a
	.long ele2
ele2:
	.long 0x0b0
	.long ele3
ele3:
	.long 0xc00
	.long 0

rsum_list:
	pushl %ebp		# Save %ebp
	rrmovl %esp,%ebp	# Set Frame ptr
	pushl %ebx		# Save %ebx
	mrmovl 8(%ebp),%eax	# Get ls
	andl %eax,%eax		# ls == 0?
	je zreturn		# Yes, goto zreturn
	mrmovl (%eax),%ebx	# val = ls->val
	mrmovl 4(%eax),%eax	# nls = ls->next
	pushl %eax		# push
	call rsum_list		# rsum_list(nls)
	addl %ebx,%eax		# val+rest
	jmp done		# Goto done
zreturn:
	xorl %eax,%eax		# val = 0
done:
	mrmovl -4(%ebp), %ebx	# restore %ebx
	rrmovl %ebp,%esp	# remove stack frame
	popl %ebp		# restore %ebp
	ret			# return

.pos 0x100
Stack:


**********
copy.ys
**********
# Initial code
	irmovl Stack,%esp
	rrmovl %esp,%ebp
	irmovl $3,%ebx
	pushl %ebx
	irmovl dest,%ebx
	pushl %ebx
	irmovl src,%ebx
	pushl %ebx
	call copy_block
	halt

.align 4
# Source array
src:
	.long 0x00a
	.long 0x0b0
	.long 0xc00

# Destination array
dest:
	.long 0x111
	.long 0x222
	.long 0x333


copy_block:
	pushl %ebp		# Save %ebp
	rrmovl %esp,%ebp	# Set Frame ptr
	xorl %esi,%esi		# result = 0
	mrmovl 8(%ebp),%ebx	# get src
	mrmovl 12(%ebp),%ecx	# get dest
	mrmovl 16(%ebp),%edx	# get len
	andl %edx,%edx		# len : 0?
	jle L4			# <=, goto done
L5:			# Loop:
	mrmovl (%ebx),%eax	# val = *src
	irmovl $1,%edi
	subl %edi,%edx		# len--
	rmmovl %eax,(%ecx)	# *dest = val
	irmovl $4,%edi
	addl %edi,%ebx		# src++
	addl %edi,%ecx		# dest++
	xorl %eax,%esi		# result ^= val
	andl %edx,%edx		# len : 0?
	jg L5			# >, goto Loop
L4:			# Done:
	rrmovl %esi,%eax	# set return value
	rrmovl %ebp,%esp	# remove frame
	popl %ebp		# Restore %ebp
	ret			# Return

.pos 0x100
Stack:






